<?xml version="1.0" encoding="utf-8"?>
<ctl:package 
    xmlns:ctl="http://www.occamlab.com/ctl" 
    xmlns:ocp="http://www.occamlab.com/te/parsers" 
    xmlns:tep="http://teamengine.sourceforge.net/parsers" 
    xmlns:saxon="http://saxon.sf.net/" 
    xmlns:xi="http://www.w3.org/2001/XInclude" 
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:sps="http://www.opengis.net/sps/1.0" 
    xmlns:ows="http://www.opengis.net/ows"
    xmlns:sml="http://www.opengis.net/sensorML" 
    xmlns:tml="http://www.opengis.net/tml" 
    xmlns:gml="http://www.opengis.net/gml" 
    xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:db5="http://docbook.org/ns/docbook" 
    xmlns:parsers="http://www.occamlab.com/te/parsers" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:spsFunctions="https://cite.opengeospatial.org/sps-1.0/src/ctl/functions.xml"
    xmlns:swe="http://www.opengis.net/swe/1.0"
    xmlns:spsTesting="https://cite.opengeospatial.org/spsTesting"
    xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
>
    
  <!--<xi:include href="functions.xml"/>-->
  
  <ctl:suite name="sps:suite">
    <!--NOTE: Don't forget to update the TARGET_NAMESPACE_URI and ATS_URL placeholder values-->
    <ctl:title>Annex A - Abstract Test Suite for SPS 1.0</ctl:title>
    <ctl:starting-test>sps:Main</ctl:starting-test>
  </ctl:suite>
  <ctl:test name="sps:Main">
    <ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
    <ctl:code>
      <!--
                1.)  Prompt the user to provide the url for an SPS implementation.
                2.)  Send a request to the provided url to determine if there is a response
                3.)  If there is a response, then begin executing tests, else fail.
            -->
        <ctl:message>Testing started at:  <xsl:value-of select="current-dateTime()" /></ctl:message>
        <xsl:variable name="form-values">
            <ctl:form height="640" width="800">
               <body>
                  <h2>Compliance test suite for Sensor Planning Service (SPS) 1.0</h2>
                  <h3>Service metadata</h3>
                  <p>
                  Please provide a URL from which a capabilities document can 
                  be retrieved. Modify the URL template below to specify the 
                  location of an OGC SPS implementation 
                  under test.
                  </p>
                  <blockquote>
                     <table border="1" padding="4" bgcolor="#00ffff">
                        <tr>
                           <td align="left">Service URL:</td>                        
                           <td align="center">
                              <input name="service-url" size="128" 
                              type="text" 
                              value="http://hostname:port/path"/>
                           </td>
                        </tr>
                     </table>
                  </blockquote>
                  <input type="submit" value="Start"/>
               </body>
            </ctl:form>
         </xsl:variable>

		<!-- Get user input:  Get the value of the SPS URL that the user supplies -->
		<xsl:variable name="sps.service.get.url" select="$form-values/values/value[@key='service-url']"/>
        
        <!--Call each test passing the capabilities URL as the parameter-->
        <ctl:call-test name="sps:ows-main">
            <ctl:with-param name="serviceURL" select="$sps.service.get.url" />
        </ctl:call-test>
        <ctl:call-test name="sps:general-main">
            <ctl:with-param name="serviceURL" select="$sps.service.get.url" />
        </ctl:call-test>
        <ctl:call-test name="sps:core-main">
            <ctl:with-param name="serviceURL" select="$sps.service.get.url" />
        </ctl:call-test>
    </ctl:code>
  </ctl:test>
  <ctl:package>
    <ctl:test name="sps:ows-main">
      <ctl:param name="serviceURL" />
      <ctl:assertion>All assertions for "ows" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the ows module.</ctl:comment>
      <ctl:link title="1. OWS">ATS_URL#ows</ctl:link>
      <ctl:code>
        <ctl:call-test name="sps:ows-OWS.ClientError.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:ows-OWS.ContentType.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:ows-OWS.CaseInsensitiveKvpNames.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:ows-OWS.GetCapabilities.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:ows-OWS.GetCapabilities-Exceptions.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:ows-OWS.GetCapabilities-AcceptVersions.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:ows-OWS.GetCapabilities-Sections.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:ows-OWS.GetCapabilities-AcceptFormats.1">
          <ctl:with-param name="test.document" select="$serviceURL" />
        </ctl:call-test>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.ClientError.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Client error">ATS_URL#OWS.ClientError</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.ContentType.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Content-Type response header">ATS_URL#OWS.ContentType</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.CaseInsensitiveKvpNames.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="KVP parameter names">ATS_URL#OWS.CaseInsensitiveKvpNames</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.GetCapabilities.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities request">ATS_URL#OWS.GetCapabilities</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.GetCapabilities-Exceptions.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - Exceptions">ATS_URL#OWS.GetCapabilities-Exceptions</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.GetCapabilities-AcceptVersions.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - AcceptVersions parameter">ATS_URL#OWS.GetCapabilities-AcceptVersions</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.GetCapabilities-Sections.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - Sections parameter">ATS_URL#OWS.GetCapabilities-Sections</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:ows-OWS.GetCapabilities-AcceptFormats.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - AcceptFormats parameter">ATS_URL#OWS.GetCapabilities-AcceptFormats</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
  </ctl:package>
  <ctl:package>
    <ctl:test name="sps:general-main">
      <ctl:param name="serviceURL" />
      <ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the general module.</ctl:comment>
      <ctl:link title="2. General">ATS_URL#general</ctl:link>
      <ctl:code>
        <ctl:call-test name="sps:general-SPS.General-InvalidRequest.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <!--<ctl:call-test name="sps:general-SPS.General-ValidResponse.1">
                        <ctl:with-param name="serviceURL" select="$serviceURL" />
                    </ctl:call-test>-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:general-SPS.General-InvalidRequest.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Verify that an invalid request produces an appropriate response from the server.">ATS_URL#SPS.General-InvalidRequest</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Issue several invalid request documents to the service.
                    2.)  Validate the response against the ExceptionReport schema.
                    3.)  If the response validates, then check that the exceptionCode value is "InvalidRequest"
                -->
        <ctl:message>Issuing an invalid request to:  <xsl:value-of select="$serviceURL" /></ctl:message>
        <xsl:variable name="body" select="string('Test')" />
        <xsl:variable name="invalidRequestResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <xsl:value-of select="$body" />
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <!--<xsl:variable name="invalidRequestResponse">
            <ctl:call-function name="spsFunctions:invalidRequest">
                <ctl:with-param name="methodURL" select="$serviceURL" />
                <ctl:with-param name="postBody" select="$body" />
            </ctl:call-function>
        </xsl:variable>-->
        <ctl:message>The server returned the following response:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
        <xsl:choose>
            <xsl:when test="not($invalidRequestResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response to an invalid request or the response from the server was not a valid exception report.  The response from the server was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to an invalid request.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$invalidRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                        <ctl:with-param name="locatorToCheck" select="string('*')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "InvalidRequest" and a locator value containing the validation issue.  The returned exception report was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:general-SPS.General-ValidResponse.1">
      <ctl:param name="responseDocument" />
      <ctl:assertion>A response is a valid response for the SPS</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Verify that a response entity is schema-valid">ATS_URL#SPS.General-ValidResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.) Validate response according to its associated schema.  This includes if the response is an ExceptionReport.
                -->
        <xsl:variable name="validationResponse">
            <ctl:call-function name="spsFunctions:validateResponse">
                <ctl:with-param name="responseDocument" select="$responseDocument" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="not($validationResponse/*)">
            <ctl:message>FAILURE:  The response was not a valid response for the SPS.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
  </ctl:package>
  <ctl:package>
    <ctl:test name="sps:core-main">
      <ctl:param name="serviceURL" />
      <ctl:assertion>All assertions for "core" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the core module.</ctl:comment>
      <ctl:link title="3. Core">ATS_URL#core</ctl:link>
      <ctl:code>
        <ctl:message>Beginning SPS specific GetCapabilities tests.</ctl:message>
        <ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <!--<xsl:variable name="getCapabilitiesResponse">
            <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseMain.1">
                <ctl:with-param name="serviceURL" select="$serviceURL" />
            </ctl:call-test>
        </xsl:variable>-->
        <ctl:message>Issuing a valid GetCapabilities request to <xsl:value-of select="$serviceURL" /></ctl:message>
              <xsl:variable name="getCapabilitiesResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                    </ctl:url>
                    <ctl:method>get</ctl:method>
                    <ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="service">SPS</ctl:param>
                    <!--Parser to get response-->
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsGetCapabilities.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
              </xsl:variable>
              <ctl:message>The server responded to a valid GetCapabilities request with the following message:  <xsl:value-of select="$getCapabilitiesResponse/*" /></ctl:message>
              <xsl:choose>
                <xsl:when test="not($getCapabilitiesResponse/*)">
                    <ctl:message>FAILURE:  The server did not return a response to a valid GetCapabilities request, or the response was not a valid SPS Capabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--Check for mandatory operations-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for optional operations-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid SensorOffering elements-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid SensorDefinition elements-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid PhenomenonOffering elements-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    
                    <!--Get the DescribeTasking URL-->
                    <xsl:variable name="describeTaskingURL">
                        <xsl:value-of select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeTasking']/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    </xsl:variable>
                    <xsl:if test="string-length(normalize-space($describeTaskingURL))>0">
                        <ctl:message>Beginning DescribeTasking tests.</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeTasking-RequestInvalidSensorIDs.1">
                            <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                        </ctl:call-test>
                        <ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNullSensorID.1">
                          <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                        </ctl:call-test>
                        <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseMain.1">
                            <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                            <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                        </ctl:call-test>
                    </xsl:if>
                                        
                    <!--Get the Submit URL-->
                    <xsl:variable name="submitURL">
                        <xsl:value-of select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='Submit']/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    </xsl:variable>
                    <xsl:if test="string-length(normalize-space($submitURL))>0">
                        <ctl:message>Beginning Submit tests.</ctl:message>
                        <ctl:call-test name="sps:core-SPS.Submit-RequestMain.1">
                            <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                            <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                            <ctl:with-param name="submitURL" select="$submitURL" />
                        </ctl:call-test>
                    </xsl:if>
                    
                    <!--Get the DescribeResultAccess URL-->
                    <xsl:variable name="describeResultAccessURL">
                        <xsl:value-of select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeResultAccess']/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    </xsl:variable>       
                    <xsl:if test="string-length(normalize-space($describeResultAccessURL))>0">
                        <ctl:message>Beginning DescribeResultAccess tests.</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullSensorID.1">
                            <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidSensorID.1">
                          <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullTaskID.1">
                          <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTaskID.1">
                          <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseMain.1">
                            <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                            <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                        </ctl:call-test>
                    </xsl:if>
                </xsl:otherwise>
              </xsl:choose>
        <![CDATA[ /*     
        <!--If there was a response to a valid GetCapabilities request and the response is valid, then continue the tests-->
        <ctl:message>Beginning DescribeTasking tests.</ctl:message>
        <xsl:choose>
            <xsl:when test="not($getCapabilitiesResponse/*)">
                <ctl:message>A valid Capabilities document is not available for <xsl:value-of select="$serviceURL" />; therefore, the remaining tests will not be executed.</ctl:message>
            </xsl:when>
            <xsl:otherwise>
                <!--Get the DescribeTasking URL-->
                <xsl:variable name="describeTaskingElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeTasking']" />
                <!---->
                <xsl:if test="$describeTaskingElement/*">
                    <xsl:variable name="describeTaskingURL" select="$describeTaskingElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    <ctl:call-test name="sps:core-SPS.DescribeTasking-RequestInvalidSensorIDs.1">
                        <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                    </ctl:call-test>
                    <ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNullSensorID.1">
                      <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                    </ctl:call-test>
                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseMain.1">
                        <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--
                                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseMatchingSensorIDs.1">
                                      <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptor.1">
                                      <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptorParameterID.1">
                                      <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ValidException.1">
                                      <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                                    </ctl:call-test>
                                    -->
                </xsl:if>
                
                <!--Get the Submit URL-->
                <ctl:message>Beginning Submit tests.</ctl:message>
                <xsl:variable name="submitElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='Submit']" />
                <!---->
                <xsl:if test="$submitElement/*">
                    <xsl:variable name="submitURL" select="$submitElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    <ctl:call-test name="sps:core-SPS.Submit-RequestMain.1">
                        <ctl:with-param name="submitURL" select="$submitURL" />
                    </ctl:call-test>
                    
                    <!--
                                    <ctl:call-test name="sps:core-SPS.Submit-ResponseValidTaskID.1">
                                      <ctl:with-param name="submitURL" select="$submitURL" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.Submit-ResponseValidEstimatedToC.1">
                                      <ctl:with-param name="submitURL" select="$submitURL" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.Submit-ResponseCorrectUseOfAlternative.1">
                                      <ctl:with-param name="submitURL" select="$submitURL" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.Submit-ResponseValidLatestResponseTime.1">
                                      <ctl:with-param name="submitURL" select="$submitURL" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.Submit-ValidException.1">
                                      <ctl:with-param name="submitURL" select="$submitURL" />
                                    </ctl:call-test>
                                    -->
                </xsl:if>
                
                <!--Get the DescribeResultAccess URL-->
                <xsl:variable name="describeResultAccessElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeResultAccess']" />
                <!---->            
                <xsl:if test="$describeResultAccessElement">
                    <xsl:variable name="describeResultAccessURL" select="$describeResultAccessElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullSensorID.1">
                        <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                    </ctl:call-test>
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidSensorID.1">
                      <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                    </ctl:call-test>
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullTaskID.1">
                      <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                    </ctl:call-test>
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTaskID.1">
                      <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                    </ctl:call-test>
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseMain.1">
                        <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--
                                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseSensorIDValidResponse.1">
                                      <ctl:with-param name="test.document" select="$test.document" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
                                      <ctl:with-param name="test.document" select="$test.document" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
                                      <ctl:with-param name="test.document" select="$test.document" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidDataNotAvailable.1">
                                      <ctl:with-param name="test.document" select="$test.document" />
                                    </ctl:call-test>
                                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ValidException.1">
                                      <ctl:with-param name="test.document" select="$test.document" />
                                    </ctl:call-test>
                                    -->
                </xsl:if>
                
                <!--<ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
                                    <ctl:with-param name="serviceURL" select="$serviceURL" />
                                </ctl:call-test>
                                <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
                                    <ctl:with-param name="test.document" select="$serviceURL" />
                                </ctl:call-test>
                                <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
                                    <ctl:with-param name="test.document" select="$serviceURL" />
                                </ctl:call-test>
                                <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
                                    <ctl:with-param name="test.document" select="$serviceURL" />
                                </ctl:call-test>
                                <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
                                    <ctl:with-param name="test.document" select="$test.document" />
                                </ctl:call-test>-->
                         
            </xsl:otherwise>
        </xsl:choose> 
        */
        ]]>
      </ctl:code>
    </ctl:test>
    <!--GetCapabilities tests-->
    <ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>The server returns a valid error report message with an exception code of MissingParameterValue when mandatory parameters are missing from the request.</ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains MissingParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles missing parameters correctly.">ATS_URL#SPS.GetCapabilities-KVPRequestParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP GET request missing the service and request parameters
                    2.)  HTTP GET request missing the service parameter
                    3.)  HTTP GET request missing the request parameter
                -->
        <!--GetCapabilities request with no service and no request parameter-->
        <ctl:message>Issuing a GetCapabilities request with no service parameter and no request parameter provided.</ctl:message>
        <xsl:variable name="requestNoServiceNoRequest">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <!--Parser to get response-->
                <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                    <parsers:schemas>
                        <parsers:schema type="url">
                            <ctl:call-function name="spsFunctions:getSchemaLocation">
                                <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                            </ctl:call-function>
                        </parsers:schema>
                    </parsers:schemas>
                </parsers:XMLValidatingParser>
                <!--<ctl:call-test name="sps:general-SPS.General-ValidResponse.1">
                                    <ctl:with-param name="responseDocument" select="$response//content/*" />
                                    </ctl:call-test>-->
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestNoServiceNoRequest/*" /></ctl:message>
        <ctl:message>Issuing a GetCapabilities request with no service parameter provided.</ctl:message>
        <!--GetCapabilities request with no service parameter-->
        <xsl:variable name="requestNoService">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="request">GetCapabilities</ctl:param>
                <!--Parser to get response-->
                <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                    <parsers:schemas>
                        <parsers:schema type="url">
                            <ctl:call-function name="spsFunctions:getSchemaLocation">
                                <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                            </ctl:call-function>
                        </parsers:schema>
                    </parsers:schemas>
                </parsers:XMLValidatingParser>
                <!--<ctl:call-test name="sps:general-SPS.General-ValidResponse.1">
                                    <ctl:with-param name="responseDocument" select="$response//content/*" />
                                    </ctl:call-test>-->
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestNoService/*" /></ctl:message>
        <ctl:message>Issuing a GetCapabilities request with no request parameter provided.</ctl:message>
        <!--GetCapabilities request with no request parameter-->
        <xsl:variable name="requestNoRequest">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="service">SPS</ctl:param>
                <!--Parser to get response-->
                <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                    <parsers:schemas>
                        <parsers:schema type="url">
                            <ctl:call-function name="spsFunctions:getSchemaLocation">
                                <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                            </ctl:call-function>
                        </parsers:schema>
                    </parsers:schemas>
                </parsers:XMLValidatingParser>
                <!--<ctl:call-test name="sps:general-SPS.General-ValidResponse.1">
                                    <ctl:with-param name="responseDocument" select="$response//content/*" />
                                    </ctl:call-test>-->
            </ctl:request>
        </xsl:variable>
        <!--Check the responses to each of the above requests to ensure that they are valid-->
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestNoRequest/*" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($requestNoServiceNoRequest/*) or not($requestNoService/*) or not($requestNoRequest/*)">
                <ctl:message>FAILURE:  The server did not return responses to the requests in this test or the responses were not valid exceptions.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:if test="$requestNoServiceNoRequest/*">
                    <ctl:message>Checking the validity of the response to a GetCapabilities request with no service and no request parameters.</ctl:message>
                    <xsl:variable name="isCorrect1">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoServiceNoRequest" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('REQUEST')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:variable name="isCorrect2">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoServiceNoRequest" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('SERVICE')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:variable name="isCorrect" select="$isCorrect1 or $isCorrect2" />
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isCorrect))">
                        <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with no request and no service parameters specified.  "<xsl:value-of select="$requestNoServiceNoRequest" />" was returned instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:if>
                <xsl:if test="$requestNoService/*">
                    <ctl:message>Checking the validity of the response to a GetCapabilities request with no service parameter.</ctl:message>
                    <xsl:variable name="isCorrect">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoService" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('Service')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isCorrect))">
                        <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with no service parameter specified.  "<xsl:value-of select="$requestNoService" />" was returned instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:if>
                <xsl:if test="$requestNoRequest/*">
                    <ctl:message>Checking the validity of the response to a GetCapabilities request with no request parameter.</ctl:message>
                    <xsl:variable name="isCorrect">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoRequest" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('Request')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isCorrect))">
                        <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with no request parameter specified.  "<xsl:value-of select="$requestNoRequest" />" was returned instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue when the service key value is not SPS. </ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid service key values correctly.">ATS_URL#SPS.GetCapabilities-KVPRequestServiceParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP GET request with a service parameter that contains a value other than SPS
                -->
        <xsl:variable name="invalidServiceParameterValue" select="string('kaldsfjlksdajf')" />
        <ctl:message>Issuing a GetCapabilities request with an invalid service value of "<xsl:value-of select="$invalidServiceParameterValue" />"</ctl:message>
        <xsl:variable name="requestInvalidServiceKeyValue">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="request">GetCapabilities</ctl:param>
                <ctl:param name="service"><xsl:value-of select="$invalidServiceParameterValue" /></ctl:param>
                <!--Parser to get response-->
                <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                    <parsers:schemas>
                        <parsers:schema type="url">
                            <ctl:call-function name="spsFunctions:getSchemaLocation">
                                <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                            </ctl:call-function>
                        </parsers:schema>
                    </parsers:schemas>
                </parsers:XMLValidatingParser>
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestInvalidServiceKeyValue/*" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($requestInvalidServiceKeyValue/*)">
                <ctl:message>FAILURE:  The server did not return or a response or the response was not a valid exception report.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to a GetCapabilities request with an invalid service value.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$requestInvalidServiceKeyValue" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('Service')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a GetCapabilities request with an invalid service parameter (<xsl:value-of select="$invalidServiceParameterValue" />) does not match the expected response.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue or OperationNotSupported when the request key value is not GetCapabilities. </ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue or OperationNotSupported; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid request key values correctly.">ATS_URL#SPS.GetCapabilities-KVPRequestRequestParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP GET request with a request parameter that contains a value other than GetCapabilities
                -->
        <xsl:variable name="invalidRequestParameterValue" select="string('lkasjflksadjflkjasdf')" />
        <ctl:message>Issuing a GetCapabilities request with an invalid request value of "<xsl:value-of select="$invalidRequestParameterValue" />"</ctl:message>
        <xsl:variable name="requestInvalidRequestKeyValue">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="request"><xsl:value-of select="$invalidRequestParameterValue" /></ctl:param>
                <ctl:param name="service">SPS</ctl:param>
                <!--Parser to get response-->
                <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                    <parsers:schemas>
                        <parsers:schema type="url">
                            <ctl:call-function name="spsFunctions:getSchemaLocation">
                                <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                            </ctl:call-function>
                        </parsers:schema>
                    </parsers:schemas>
                </parsers:XMLValidatingParser>
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestInvalidRequestKeyValue/*" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($requestInvalidRequestKeyValue/*)">
                <ctl:message>FAILURE:  The server did not return or a response or the response was not a valid exception report.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to a GetCapabilities request with an invalid request value.</ctl:message>
                <xsl:variable name="isCorrect1">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$requestInvalidRequestKeyValue" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('Request')" />
                    </ctl:call-function>
                </xsl:variable>
                <xsl:variable name="isCorrect2">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$requestInvalidRequestKeyValue" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('OperationNotSupported')" />
                        <ctl:with-param name="locatorToCheck" select="$invalidRequestParameterValue" />
                    </ctl:call-function>
                </xsl:variable>
                <xsl:variable name="isCorrect" select="$isCorrect1 or $isCorrect2" />
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a GetCapabilities request with an invalid request parameter (<xsl:value-of select="$invalidRequestParameterValue" />) does not match the expected response.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseMain.1">
        <ctl:param name="serviceURL" />
        <ctl:assertion>All assertions related to an SPS GetCapabilities response are valid.</ctl:assertion>
        <ctl:comment>Executes a GetCapabilities request and checks the response for validity</ctl:comment>
        <ctl:link></ctl:link>
        <ctl:code>
            <!--PUT TEST CODE HERE-->
            <!--
                            1.)  Valid HTTP GET request for GetCapabilities.  Store response in a variable.
                            2.) Validate response against the GetCapabilities schema.  Call sps:general-SPS.General-ValidResponse.1
                            3.) Loop through the operations listed in the OperationsMetadata section of the GetCapabilities response and store the URL for each operation (if it exists) for use in later tests.  Fail if one of the mandatory operations is missing.
                        -->
              <ctl:message>Issuing a valid GetCapabilities request to <xsl:value-of select="$serviceURL" /></ctl:message>
              <xsl:variable name="getCapabilitiesResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                    </ctl:url>
                    <ctl:method>get</ctl:method>
                    <ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="service">SPS</ctl:param>
                    <!--Parser to get response-->
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsGetCapabilities.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
              </xsl:variable>
              <ctl:message>The server responded to a valid GetCapabilities request with the following message:  <xsl:value-of select="$getCapabilitiesResponse/*" /></ctl:message>
              <xsl:choose>
                <xsl:when test="not($getCapabilitiesResponse/*)">
                    <ctl:message>FAILURE:  The server did not return a response to a valid GetCapabilities request, or the response was not a valid SPS Capabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--Check for mandatory operations-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for optional operations-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid SensorOffering elements-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid SensorDefinition elements-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid PhenomenonOffering elements-->
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:value-of select="$getCapabilitiesResponse/*" />
        </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>The OperationsMetadata section lists the mandatory operations of the SPS.</ctl:assertion>
      <ctl:comment>Pass if the service lists the GetCapabilities, DescribeTasking, Submit, and DescribeResultAccess operations with the proper bindings in the OperationsMetadata section; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the OperationsMetadata section advertises the mandatory operations of the SPS.">ATS_URL#SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations</ctl:link>
      <ctl:code>
                <xsl:variable name="getCapabilitiesElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']" />
                <xsl:variable name="getCapabilitiesGetHref">
                    <xsl:value-of select="$getCapabilitiesElement/ows:DCP/ows:HTTP/ows:Get/@xlink:href" />
                </xsl:variable>
                <xsl:variable name="describeTaskingElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeTasking']" />
                <xsl:variable name="describeTaskingPostHref">
                    <xsl:value-of select="$describeTaskingElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                </xsl:variable>
                <xsl:variable name="submitElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='Submit']" />
                <xsl:variable name="submitPostHref">
                    <xsl:value-of select="$submitElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                </xsl:variable>
                <xsl:variable name="describeResultAccessElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeResultAccess']" />
                <xsl:variable name="describeResultAccessPostHref">
                    <xsl:value-of select="$describeResultAccessElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                </xsl:variable>
                <!--Check for a GetCapabilities operation-->
                <xsl:if test="not($getCapabilitiesElement/*)">
                    <ctl:message>FAILURE:  The GetCapabilities operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($getCapabilitiesGetHref) or string-length(normalize-space($getCapabilitiesGetHref))=0">
                    <ctl:message>FAILURE:  The GetCapabilities operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP GET binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <!--Check for a DescribeTasking operation--> 
                <xsl:if test="not($describeTaskingElement/*)">
                    <ctl:message>FAILURE:  The DescribeTasking operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($describeTaskingPostHref) or string-length(normalize-space($describeTaskingPostHref))=0">
                    <ctl:message>FAILURE:  The DescribeTasking operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <!--Check for a Submit operation-->
                <xsl:if test="not($submitElement/*)">
                    <ctl:message>FAILURE:  The Submit operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($submitPostHref) or string-length(normalize-space($submitPostHref))=0">
                    <ctl:message>FAILURE:  The Submit operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <!--Check for a DescribeResultAccess operation--> 
                <xsl:if test="not($describeResultAccessElement/*)">
                    <ctl:message>FAILURE:  The DescribeResultAccess operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($describeResultAccessPostHref) or string-length(normalize-space($describeResultAccessPostHref))=0">
                    <ctl:message>FAILURE:  The DescribeResultAccess operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>Any non-mandatory operations advertised in the OperationsMetadata section have valid SPS method names.</ctl:assertion>
      <ctl:comment>Pass if the service lists operations in addition to the mandatory operations, and each of the advertised operations has a valid SPS operation name; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any non-mandatory operations listed in the OperationsMetadata section are valid SPS operation names.  This is still up for debate and will probably not be part of the final tests.">ATS_URL#SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, check to see if the additional methods listed in the OperationsMetadata section are valid SPS method names.
                -->
        <xsl:variable name="spsOperations">
            <spsTesting:SPSOperations>
                <spsTesting:Operation>GetCapabilities</spsTesting:Operation>
                <spsTesting:Operation>DescribeTasking</spsTesting:Operation>
                <spsTesting:Operation>Submit</spsTesting:Operation>
                <spsTesting:Operation>DescribeResultAccess</spsTesting:Operation>
                <spsTesting:Operation>GetFeasibility</spsTesting:Operation>
                <spsTesting:Operation>GetStatus</spsTesting:Operation>
                <spsTesting:Operation>Update</spsTesting:Operation>
                <spsTesting:Operation>Cancel</spsTesting:Operation>
            </spsTesting:SPSOperations>
        </xsl:variable>
        <xsl:variable name="spsOperationsSet" select="$spsOperations//spsTesting:Operation" />
        <ctl:message>Verifying that the provided operations have valid SPS operation names.</ctl:message>
        <xsl:for-each select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation/@name">
            <!--<xsl:variable name="operationName" select="." />-->
            <!--TODO:  Complete this test.-->
            <ctl:message>Checking "<xsl:value-of select="." />" for validity.</ctl:message>
            <xsl:if test="empty(index-of($spsOperationsSet,.))">
                <ctl:message>FAILURE:  The "<xsl:value-of select="." />" operation is not listed in the SPS specification.</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>Each SensorOffering sub-element (AreaOfService, Phenomenon, SensorDefinition, and SensorID) has a value.</ctl:assertion>
      <ctl:comment>Pass if each sub-element of a SensorOffering element has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each SensorOffering has appropriate values for its sub-elements.">ATS_URL#SPS.GetCapabilities-ResponseContentsSensorOfferings</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, loop through the SensorOffering sub-elements to ensure that each sub-element contains a value.
                -->
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering">
            <xsl:variable name="areaOfService" select="sps:AreaOfService" />
            <xsl:variable name="phenomenon" select="normalize-space(sps:Phenomenon)" />
            <xsl:variable name="sensorDefinition" select="normalize-space(sps:SensorDefinition)" />
            <xsl:variable name="sensorID" select="normalize-space(sps:SensorID)" />
            <!--Check AreaOfService (for a child element or more?)-->
            <xsl:if test="not($areaOfService/*)">
                <!--TODO: Check AreaOfService-->
                <ctl:message>FAILURE:  The AreaOfService value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <!--Check Phenomenon (for an empty string or an invalid URN?)-->
            <xsl:if test="string-length($phenomenon)=0">
                <ctl:message>FAILURE:  The Phenomenon value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <!--Check SensorDefinition (for an empty string)-->
            <xsl:if test="string-length($sensorDefinition)=0">
                <ctl:message>FAILURE:  The SensorDefinition value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <!--Check SensorID (for an empty string or an invalid URN?)-->
            <xsl:if test="string-length($sensorID)=0">
                <ctl:message>FAILURE:  A SensorID value is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>The SensorDefinition element of each SensorOffering element links to a valid SensorML or TML document.</ctl:assertion>
      <ctl:comment>Pass if the SensorDefinition element of each SensorOffering element links to a valid SensorML or TML document; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the value provided in the SensorDefinition field of each SensorOffering links to a valid SensorML or TML document.">ATS_URL#SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, obtain the value of each SensorDefinition element using a loop.
                    2.)  Store the value of the SensorDefinition element in a variable.
                    3.)  Request (HTTP) the value in the SensorDefinition variable if a value exists, else fail.
                    4.)  If a response is returned, then validate the response against the appropriate schema (SensorML or TML), else fail.
                    5.)  If the response validates against its associated schema then pass, else fail.
                    6.)  Check if the sensorID in the SensorML or TML document matches the requested SensorID?
                -->
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering">
            <!--Store the associated SensorID element value for later use-->
            <xsl:variable name="sensorID" select="sps:SensorID" />
            <xsl:variable name="sensorDefinition" select="normalize-space(sps:SensorDefinition)" />
            <!--Create a request based on the value in the SensorDefiniton element and store the response in a variable-->
            <ctl:message>Issuing a request for the sensor definition of "<xsl:value-of select="$sensorID" />" to the following URL:  <xsl:value-of select="$sensorDefinition" /></ctl:message>
            <xsl:variable name="sensorDefinitionResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$sensorDefinition" />
                    </ctl:url>
                    <ctl:method>get</ctl:method>
                    <!--Parser to get response-->
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('sensorML.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('tml.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
            </xsl:variable>
            <ctl:message>The server returned the following response:  <xsl:value-of select="$sensorDefinitionResponse/*" /></ctl:message>
            <xsl:choose>
                <xsl:when test="not($sensorDefinitionResponse/*)">
                    <ctl:message>FAILURE:  The advertised value in the SensorDefinition element for <xsl:value-of select="$sensorID" /> did not return a response or did not link to a valid SensorML or TML document.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--TODO:  Verify that the ID of the sensor matches the requested sensorID-->
                    <xsl:choose>
                        <xsl:when test="$sensorDefinitionResponse//sml:SensorML">
                            <xsl:variable name="responseSensorID" select="$sensorDefinitionResponse//sml:Term[contains(@definition,':uniqueID')]/sml:value" />
                            <xsl:if test="string-length(normalize-space($responseSensorID))=0">
                                <ctl:message>FAILURE:  There was no sensorID specified in the returned SensorML document.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                            <xsl:if test="not($responseSensorID=$sensorID)">
                                <ctl:message>FAILURE:  The sensorID in the returned SensorML document (<xsl:value-of select="$responseSensorID" />) does not match the sensorID specified in the SensorOffering (<xsl:value-of select="$sensorID" />).</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="$sensorDefinitionResponse//tml:tml">
                            <xsl:variable name="responseSensorID" select="$sensorDefinitionResponse//tml:tml/@uid" />
                            <xsl:if test="string-length(normalize-space($responseSensorID))=0">
                                <ctl:message>FAILURE:  There was no sensorID specified in the returned TML document.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                            <xsl:if test="not($responseSensorID=$sensorID)">
                                <ctl:message>FAILURE:  The sensorID in the returned TML document (<xsl:value-of select="$responseSensorID" />) does not match the sensorID specified in the SensorOffering (<xsl:value-of select="$sensorID" />).</ctl:message>
                                <ctl:fail />
                            </xsl:if>   
                        </xsl:when>
                        <xsl:otherwise>
                            <ctl:message>FAILURE:  The unique identifier for the requested sensor could not be determined from the returned sensor definition document.</ctl:message>
                            <ctl:fail />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>Each PhenomenonOffering sub-element (Phenomenon and SensorID) has a value.</ctl:assertion>
      <ctl:comment>Pass if each PhenomenonOffering sub-element has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each PhenomenonOffering has appropriate values for its sub-elements.">ATS_URL#SPS.GetCapabilities-ResponseContentsPhenomenonOfferings</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, loop through each sub-element of each PhenomenonOffering
                    2.)  Check to ensure that each sub-element's inner text property has a value.  Pass if each sub-element has a value, fail otherwise.
                -->
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:PhenomenonOfferingList/sps:PhenomenonOffering">
            <!--Check the Phenomenon element (ensure that each Phenomenon listed matches a Phenomenon listed in a SensorOffering element?)-->
            <xsl:if test="string-length(normalize-space(sps:Phenomenon))=0"><!--Check to see if this Phenomenon is in a URN format?-->
                <ctl:message>FAILURE:  The Phenomenon element value for a PhenomenonOffering is an empty string.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <!--Check each SensorID element (ensure that each SensorID element listed matches a SensorID listed in the SensorOffering element?)-->
            <xsl:for-each select="sps:SensorID">
                <xsl:if test="string-length(normalize-space(.))=0">
                    <ctl:message>FAILURE:  The SensorID element value for a PhenomenonOffering is an empty string</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ValidException.1">
      <ctl:param name="getCapabilitiesDocument" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the GetCapabilities operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the GetCapabilities operation; fail otherwise</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the GetCapabilities operation.">ATS_URL#SPS.GetCapabilities-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UnknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>TaskIDExpired</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('GetCapabilities')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$getCapabilitiesDocument" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$getCapabilitiesDocument//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the GetCapabilities operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    
    <!--DescribeTasking tests-->
    <ctl:test name="sps:core-SPS.DescribeTasking-RequestInvalidSensorIDs.1">
      <ctl:param name="describeTaskingURL" />
      <ctl:assertion>The server returns a valid error report message with a value of UnknownSensorID for the exceptionCode parameter and a list of the unknown sensor IDs in the locator parameter when one or more invalid sensor ID(s) are supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of UnknownSensorID and a list of the unknown sensor IDs in the locator parameter; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid sensor ID(s) correctly.">ATS_URL#SPS.DescribeTasking-RequestInvalidSensorIDs</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP POST DescribeTasking request with one random sensorID.
                    2.)  Validate response against ExceptionReport schema.
                    3.)  If response validates, then check that the exceptionCode parameter is "UnknownSensorID" and that the requested sensorID is listed in the locator parameter.
                    4.)  Repeat 1 - 3 with a set of random sensor IDs to test how the server handles multiple sensorIDs
                -->
        <xsl:variable name="sensorIDs" select="string('blah,adsjflkasjdflkdsajf,ewioruowireuoierwu,1384982348924988923893298438294')" />
        <xsl:variable name="describeTaskingResponse">
            <!--<ctl:call-function name="spsFunctions:describeTaskingRequest">
                <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                <ctl:with-param name="sensorIDs" select="$sensorIDs" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <xsl:for-each select="tokenize($sensorIDs,',')">
                                <sensorID><xsl:value-of select="." /></sensorID>
                            </xsl:for-each>
                        </DescribeTasking>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('spsDescribeTaskingRequestResponse.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <ctl:message>A DescribeTasking request with the following sensorIDs "<xsl:value-of select="$sensorIDs" />" produced the following response:  "<xsl:value-of select="$describeTaskingResponse/*" />"</ctl:message>
        <xsl:choose>
            <xsl:when test="not($describeTaskingResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select="$describeTaskingResponse//ows:ExceptionReport/ows:Exception">
                    <xsl:variable name="locatorValue">
                        <xsl:value-of select="@locator" />
                    </xsl:variable>
                    <xsl:variable name="exceptionCode">
                        <xsl:value-of select="@exceptionCode" />
                    </xsl:variable>
                    <ctl:message>Exception locator:  <xsl:value-of select="$locatorValue" /></ctl:message>
                    <ctl:message>Exception exceptionCode:  <xsl:value-of select="$exceptionCode" /></ctl:message>
                    <xsl:if test="not($exceptionCode='UnknownSensorID')">
                        <ctl:message>FAILURE:  An exceptionCode of UnknownSensorID was expected in the response.  "<xsl:value-of select="@exceptionCode" />" was provided instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                    <!--TODO:  Figure out what to do here-->
                    <xsl:variable name="sensorIDSequence" select="tokenize($sensorIDs,',')" />
                    <xsl:variable name="locatorSequence" select="tokenize($locatorValue,',')" />
                    <xsl:for-each select="$sensorIDSequence">
                        <xsl:variable name="currentItem" select="." />
                        <xsl:if test="empty(index-of($locatorSequence,$currentItem))">
                            <ctl:message>FAILURE:  The locator value was expected to contain "<xsl:value-of select="$currentItem" />".</ctl:message>
                            <ctl:fail />
                        </xsl:if>
                    </xsl:for-each>
                    <!--<xsl:if test="not(empty($sensorIDSequence except $locatorSequence))">
                                                    <ctl:message>The locator value was expected to be one of the following values:  <xsl:value-of select="$sensorIDs" />; "<xsl:value-of select="$locatorValue" />" was provided instead.</ctl:message>
                                                    <ctl:fail />
                                             </xsl:if>-->
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-RequestNullSensorID.1">
      <ctl:param name="describeTaskingURL" />
      <ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when no SensorID value is supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles a request with a null SensorID correctly.">ATS_URL#SPS.DescribeTasking-RequestNullSensorID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP POST DescribeTasking request with an empty sensorID.
                    2.)  Validate response against ExceptionReport schema.
                    3.)  If response validates, then check that the exceptionCode parameter is "InvalidParameterValue".
                -->
        <!--<xsl:variable name="sensorIDs" select="string('')" />-->
        <xsl:variable name="describeTaskingResponse">
            <!--<ctl:call-function name="spsFunctions:describeTaskingRequest">
                <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                <ctl:with-param name="sensorIDs" select="string('')" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="string('')" /></sensorID>
                        </DescribeTasking>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('spsDescribeTaskingRequestResponse.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeTaskingResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select="$describeTaskingResponse//ows:ExceptionReport/ows:Exception">
                    <xsl:variable name="locatorValue">
                        <xsl:value-of select="@locator" />
                    </xsl:variable>
                    <xsl:variable name="exceptionCode">
                        <xsl:value-of select="@exceptionCode" />
                    </xsl:variable>
                    <ctl:message>Exception locator:  <xsl:value-of select="$locatorValue" /></ctl:message>
                    <ctl:message>Exception exceptionCode:  <xsl:value-of select="$exceptionCode" /></ctl:message>
                    <xsl:if test="not($exceptionCode='InvalidParameterValue')">
                        <ctl:message>FAILURE:  An exceptionCode of InvalidParameterValue was expected in the response</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                    <xsl:if test="not(lower-case($locatorValue)='sensorid')">
                        <ctl:message>FAILURE:  The locator value was expected to be "sensorID"; "<xsl:value-of select="$locatorValue" />" was provided instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseMain.1">
      <ctl:param name="describeTaskingURL" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>The response to a DescribeTasking request is valid.</ctl:assertion>
      <ctl:comment>Pass if each InputDescriptor element contains values for each of its sub-elements and these sub-element values appear to be valid; fail otherwise.</ctl:comment>
      <ctl:link title="Verify a DescribeTasking response."></ctl:link>
      <ctl:code>
        <!--Loop through the SensorID values in the Capabilities document-->
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering/sps:SensorID">
            <!--Call DescribeTasking for each SensorID-->
            <xsl:variable name="sensorID" select="." />
            <ctl:message>Sending DescribeTasking request with sensorID "<xsl:value-of select="$sensorID" />"</ctl:message>
            <xsl:variable name="describeTaskingResponse">
                <!--<ctl:call-function name="spsFunctions:describeTaskingRequest">
                    <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                    <ctl:with-param name="sensorIDs" select="." />
                </ctl:call-function>-->
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$sensorID" /></sensorID>
                        </DescribeTasking>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('spsDescribeTaskingRequestResponse.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
            </xsl:variable>
            <xsl:choose>
                <xsl:when test="not($describeTaskingResponse/*)">
                    <ctl:message>FAILURE:  No response was returned from the server for a DescribeTasking request with sensorID "<xsl:value-of select="$sensorID" />", or the response did not validate according to the DescribeTasking schema.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--Using the DescribeTasking response, ensure that the values in the sub-elements are valid by calling sub-tests-->
                    <!--Ensure that the SensorID in the response matches the SensorID provided in the request-->
                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseMatchingSensorIDs.1">
                        <ctl:with-param name="requestedSensorID" select="$sensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                    </ctl:call-test>
                    <!--Ensure that the InputDescriptor elements contain values for their sub-elements-->
                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptor.1">
                        <ctl:with-param name="requestedSensorID" select="$sensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                    </ctl:call-test>
                    <!--Ensure that the parameterID of each InputDescriptor contains a value and that the parameterID is unique-->
                    <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptorParameterID.1">
                        <ctl:with-param name="requestedSensorID" select="$sensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                    </ctl:call-test>
                    <!--If an exception report is returned, ensure that it is a valid exception report for the DescribeTasking operation-->
                    <!--<ctl:call-test name="sps:core-SPS.DescribeTasking-ValidException.1">
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                    </ctl:call-test>-->
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseMatchingSensorIDs.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>The sensorID field of each TaskingDescriptor element is one of the SensorID values provided in the request.</ctl:assertion>
      <ctl:comment>Pass if the SensorID value in each TaskingDescriptor element is one of the SensorID values supplied in the DescribeTasking request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the sensorID field of each TaskingDescriptor element is one of the SensorID values provided in the request.">ATS_URL#SPS.DescribeTasking-ResponseMatchingSensorIDs</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP POST valid DescribeTasking request with one or more valid sensorID(s).  Get each advertised SensorID from the Capabilities document.
                    2.) Validate response against DescribeTaskingResponse schema.
                    3.)  If the reponse validates, then check that the SensorID value in each of the TaskingDescriptor elements matches one the request sensorID(s).
                -->
        <xsl:variable name="responseSensorID" select="$describeTaskingResponse//sps:sensorID" />
        <xsl:if test="not($responseSensorID=$requestedSensorID)">
            <ctl:message>FAILURE:  The sensorID of the response "<xsl:value-of select="$responseSensorID" />" does not match the sensorID in the request "<xsl:value-of select="$requestedSensorID" />".</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptor.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>Each InputDescriptor element contains appropriate values for its sub-elements.</ctl:assertion>
      <ctl:comment>Pass if each InputDescriptor element contains values for each of its sub-elements and these sub-element values appear to be valid; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each InputDescriptor element contains appropriate values for its sub-elements.  This is probably tested through schema validation, so this test may be unnecessary.">ATS_URL#SPS.DescribeTasking-ResponseValidInputDescriptor</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptorParameterID.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>The parameterID of each InputDescriptor element contains a value.</ctl:assertion>
      <ctl:comment>Pass if the parameterID element of each InputDescriptor element contains a value and each parameterID element has a unique value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the parameterID of each InputDescriptor element contains a value.">ATS_URL#SPS.DescribeTasking-ResponseValidInputDescriptorParameterID</ctl:link>
      <ctl:code>
        <!--
                    1.)  Store the parameterID values in a variable
                    2.)  Store the distinct parameterID values in a variable
                    3.)  Loop through each parameterID value and ensure that it is not null
                    4.)  Compare the distinct parameterID values with the initial parameterID values to ensure that they match
                -->
        <ctl:message><xsl:value-of select="count($describeTaskingResponse//sps:InputDescriptor/@parameterID)" /> parameter(s) discovered.  Checking parameters...</ctl:message>
        <!--Determine the distinct parameterID values-->
        <xsl:variable name="distinctParameterIDs" select="distinct-values($describeTaskingResponse//sps:InputDescriptor/@parameterID)" />
        <!--Loop through the parameterID values in the response to ensure that each is not null-->
        <xsl:for-each select="$describeTaskingResponse//sps:InputDescriptor/@parameterID">
            <ctl:message>Checking parameterID:  <xsl:value-of select="." /></ctl:message>
            <xsl:if test="string-length(normalize-space())=0">
                <ctl:message>FAILURE:  A parameterID for <xsl:value-of select="$requestedSensorID" /> is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:for-each>
        <!--Compare the parameterID values with the distinctParameterID values to ensure that all parameterID values are distinct-->
        <xsl:if test="not($describeTaskingResponse//sps:InputDescriptor/@parameterID=$distinctParameterIDs)">
            <ctl:message>FAILURE:  One or more parameterID values for <xsl:value-of select="$requestedSensorID" /> are not unique</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ValidException.1">
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the DescribeTasking operation.</ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value that is valid for the DescribeTasking operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the DescribeTasking operation">ATS_URL#SPS.DescribeTasking-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UnknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('DescribeTasking')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describeTaskingResponse//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the DescribeTasking operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    
    <!--Submit tests-->
    <ctl:test name="sps:core-SPS.Submit-RequestMain.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="describeTaskingURL" />
      <ctl:param name="submitURL" />
      <ctl:assertion>All Submit request assertions are satisfied.</ctl:assertion>
      <ctl:comment>Pass if all Submit request assertions are satisfied; fail otherwise.</ctl:comment>
      <ctl:link title=""></ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  DescribeTasking request/response.
                    2.)  Based on response generate form
                    3.)  User clicks Submit button after filling in form values
                    4.)  Generate Submit request
                    5.)  Retrieve SumbitRequestResponse from the server
                    6.)  Valid SubmitRequestResponse
                -->
        <!--Get the SensorID values from the Capabilities document-->
        <xsl:variable name="sensorIDs" select="$getCapabilitiesResponse//sps:SensorOffering/sps:SensorID" />
        <ctl:message><xsl:value-of select="count($sensorIDs)" /> sensorID values were discovered from the Capabilities document.</ctl:message>
        <!--Provide a form to the user allowing them to pick a sensor for which Submit requests will be posted-->
        <xsl:variable name="chooseSensorForm">
            <ctl:form height="640" width="800">
               <body>
                  <h2>Please choose a sensor for performing Submit operation tests.</h2>
                  <blockquote>
                     <table border="1" padding="4" bgcolor="#00ffff">
                        <tr>
                           <td align="left">Sensor ID:</td>                        
                           <td align="center">
                              <select name="sensorIDDropDown">
                                <xsl:for-each select="$sensorIDs">
                                    <xsl:variable name="sensorID" select="." />
                                    <option><xsl:attribute name="value"><xsl:value-of select="$sensorID" /></xsl:attribute><xsl:value-of select="$sensorID" /></option> 
                                </xsl:for-each>
                              </select>
                           </td>
                        </tr>
                     </table>
                  </blockquote>
                  <input type="submit" value="Select"/>
               </body>
            </ctl:form>
        </xsl:variable>
        <!--Get the user selected sensorID-->
        <xsl:variable name="selectedSensorID" select="$chooseSensorForm/values/value[@key='sensorIDDropDown']" />
        <!--Call DescribeTasking for this sensorID-->
        <xsl:variable name="describeTaskingResponse">
            <!--<ctl:call-function name="spsFunctions:describeTaskingRequest">
                <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                <ctl:with-param name="sensorIDs" select="$selectedSensorID" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$selectedSensorID" /></sensorID>
                        </DescribeTasking>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('spsDescribeTaskingRequestResponse.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeTaskingResponse/*)">
                <ctl:message>FAILURE:  Unable to construct a Submit request form containing taskable parameters, since the server did not return a valid response to the DescribeTasking request for "<xsl:value-of select="$selectedSensorID" />".</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <!--Display a form allowing the user to enter in values for the taskable parameters for the selected sensor-->
                <xsl:variable name="enterTaskingOptionsForm">
                    <ctl:form height="640" width="800">
                       <body>
                          <h2>Please enter values for a WNS URL and User ID</h2>
                          <blockquote>
                             <table border="1" padding="4" bgcolor="#00ffff">
                                    <tr>
                                        <td>WNS URL:</td>
                                        <td><input name="wnsURL" type="text" /></td>
                                    </tr>
                                    <tr>
                                        <td>WNS User ID:</td>
                                        <td><input name="wnsUserID" type="text" /></td>
                                    </tr>
                             </table>
                          </blockquote>
                          <h2>Please enter valid values for the available taskable parameters for <xsl:value-of select="$selectedSensorID" /></h2>
                          <blockquote>
                             <table border="1" padding="4" bgcolor="#00ffff">
                                <thead>
                                    <tr>
                                        <th>Parameter ID</th>
                                        <th>Description</th>
                                        <th>Use</th>
                                        <th>Type</th>
                                        <th>Definition</th>
                                        <th>Units</th>
                                        <th>Min</th>
                                        <th>Max</th>
                                        <th>Value</th>
                                    </tr>
                                </thead>
                                <tbody>
                                <xsl:for-each select="$describeTaskingResponse//sps:InputDescriptor">
                                    <xsl:variable name="parameterID">
                                        <xsl:value-of select="@parameterID" />
                                    </xsl:variable>
                                    <xsl:variable name="definitionNode" select="sps:definition/sps:commonData/*[1]" />
                                    <xsl:variable name="definitionNodeName" select="local-name-from-QName(node-name($definitionNode))" />
                                    <xsl:variable name="constraintNode" select="$definitionNode/swe:constraint" />
                                    <xsl:variable name="min" select="$constraintNode/swe:AllowedValues/swe:min" />
                                    <xsl:variable name="max" select="$constraintNode/swe:AllowedValues/swe:max" />
                                    <xsl:variable name="interval" select="$constraintNode//swe:interval" />
                                    <xsl:variable name="intervalParts" select="tokenize($interval,'\s+')" />
                                    <xsl:variable name="intervalMin" select="$intervalParts[1]" />
                                    <xsl:variable name="intervalMax" select="$intervalParts[2]" />
                                    <xsl:variable name="allowedTokens" select="$constraintNode/swe:AllowedTokens//swe:tokenList" />
                                    <xsl:variable name="allowedTokens2" select="$constraintNode/swe:AllowedTokens/swe:valueList" />
                                    <xsl:variable name="allowedTokens2Sequence" select="tokenize($allowedTokens2,'\s+')" />
                                    <xsl:variable name="locationVector" select="$definitionNode//swe:location/swe:Vector" />
                                    <xsl:variable name="coordinates" select="$locationVector//swe:coordinate" />
                                    <tr><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Row')" /></xsl:attribute>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_ID')" /></xsl:attribute><xsl:value-of select="$parameterID" /></td>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Description')" /></xsl:attribute><xsl:value-of select="gml:description" /></td>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Use')" /></xsl:attribute><xsl:value-of select="@use" /></td>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Type')" /></xsl:attribute><xsl:value-of select="$definitionNodeName" /></td>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Definition')" /></xsl:attribute><xsl:value-of select="$definitionNode/@definition" /></td>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Units')" /></xsl:attribute><xsl:value-of select="$definitionNode/swe:uom/@code" /></td>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Min')" /></xsl:attribute>
                                            <xsl:if test="string-length($min)>0">
                                                <xsl:value-of select="$min" />
                                            </xsl:if>
                                            <xsl:if test="string-length($intervalMin)>0">
                                                <xsl:value-of select="$intervalMin" />
                                            </xsl:if>
                                        </td>
                                        <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Max')" /></xsl:attribute>
                                            <xsl:if test="string-length($max)>0">
                                                <xsl:value-of select="$max" />
                                            </xsl:if>
                                            <xsl:if test="string-length($intervalMax)>0">
                                                <xsl:value-of select="$intervalMax" />
                                            </xsl:if>
                                        </td>
                                        <td>
                                            <xsl:choose>
                                                <xsl:when test="count($allowedTokens)>0">
                                                    <select><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute>
                                                        <xsl:for-each select="$allowedTokens">
                                                            <option><xsl:attribute name="value"><xsl:value-of select="." /></xsl:attribute><xsl:value-of select="." /></option>
                                                        </xsl:for-each>
                                                    </select>
                                                </xsl:when>
                                                <xsl:when test="count($allowedTokens2Sequence)>0">
                                                    <select><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute>
                                                        <xsl:for-each select="$allowedTokens2Sequence">
                                                            <option><xsl:attribute name="value"><xsl:value-of select="." /></xsl:attribute><xsl:value-of select="." /></option>
                                                        </xsl:for-each>
                                                    </select>
                                                </xsl:when>
                                                <xsl:when test="count($coordinates)>0">
                                                    <xsl:for-each select="$coordinates">
                                                        <xsl:variable name="coordinateInputID" select="concat($parameterID,'_',translate(@name,' ','_'),'_Value')" />
                                                        <ctl:message><xsl:value-of select="$coordinateInputID" /></ctl:message>
                                                        <xsl:value-of select="concat(@name,':  ')" /><input type="text"><xsl:attribute name="name"><xsl:value-of select="$coordinateInputID" /></xsl:attribute></input>
                                                    </xsl:for-each>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <input type="text"><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute></input>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </td>
                                    </tr>
                                </xsl:for-each>
                                </tbody>
                             </table>
                          </blockquote>
                          <blockquote>
                            <h2>
                                Please choose a time frame for this tasking.  The time frame should be a time that occurs in the future; otherwise, your tasking will most likely be rejected.
                                The supplied value can either be an ISO 8601 compliant date/time value (i.e. 2007-12-01T13:21:55.555Z) or an ISO 8601 duration (i.e. PT5M).
                            </h2>
                             <table border="1" padding="4" bgcolor="#00ffff">
                                <tr>
                                    <td>timeFrame:</td>
                                    <td><input type="text" name="timeFrame"><xsl:attribute name="value" select="current-dateTime()" /></input></td>
                                </tr>
                             </table>
                          </blockquote>
                          <input type="submit" value="Submit"/>
                       </body>
                    </ctl:form>
                </xsl:variable>
                <!--TODO:  Add in parameter checking somehow?-->
                <!--Create a valid Submit request based on user input from the previously displayed form-->
                <!--xsi:schemaLocation="http://www.opengis.net/sps/1.0 http://schemas.opengis.net/sps/1.0.0/spsAll.xsd" xmlns="http://www.opengis.net/sps/1.0" xmlns:swe="http://www.opengis.net/swe/1.0" xmlns:gml="http://www.opengis.net/gml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="SPS" version="1.0.0">-->
                <xsl:variable name="submitRequest">
                    <sps:Submit xmlns:sps="http://www.opengis.net/sps/1.0" xmlns:gml="http://www.opengis.net/gml" xmlns:swe="http://www.opengis.net/swe/1.0" service="SPS" version="1.0.0">
                        <sps:notificationTarget>
                            <sps:notificationID><xsl:value-of select="$enterTaskingOptionsForm/values/value[@key='wnsUserID']" /></sps:notificationID>
                            <sps:notificationURL><xsl:value-of select="$enterTaskingOptionsForm/values/value[@key='wnsURL']" /></sps:notificationURL>
                        </sps:notificationTarget>
                        <sps:sensorParam>
                            <sps:sensorID><xsl:value-of select="$selectedSensorID" /></sps:sensorID>
                            <sps:parameters>
                                <xsl:for-each select="$describeTaskingResponse//sps:InputDescriptor">
                                <!--<xsl:for-each select="$enterTaskingOptionsForm//table/tr[contains(@id,'_Row')]">-->
                                    <xsl:variable name="parameterID">
                                        <xsl:value-of select="@parameterID" />
                                    </xsl:variable>
                                    <xsl:variable name="use">
                                        <xsl:value-of select="@use" />
                                    </xsl:variable>
                                    <xsl:variable name="inputID" select="concat($parameterID,'_Value')" />
                                    <xsl:variable name="parameterValue" select="$enterTaskingOptionsForm/values/value[@key=$inputID]" />
                                    <xsl:if test="($use='required') or (string-length(normalize-space($parameterValue))>0)">
                                    <!--<xsl:if test="(td[contains(@id,'_Use')]='required') or (string-length(normalize-space(td[contains(@id,'_Value')]))>0)">-->
                                        <sps:InputParameter><xsl:attribute name="parameterID"><xsl:value-of select="$parameterID" /></xsl:attribute><!--<xsl:value-of select="td[contains(@id,'_ID')]" />-->
                                            <sps:value>
                                                <xsl:variable name="definitionNode" select="sps:definition/sps:commonData/*[1]" />
                                                <xsl:variable name="elementName" select="local-name-from-QName(node-name($definitionNode))" />
                                                <xsl:variable name="elementValue">
                                                    <xsl:value-of select="$parameterValue" />
                                                </xsl:variable>
                                                <!--<xsl:variable name="elementName" select="td[contains(@id,'_Type')]/text()" />
                                                <xsl:variable name="elementValue" select="td[contains(@id,'_Value')]/text()" />-->
                                                <ctl:message><xsl:value-of select="$elementName" />:  <xsl:value-of select="$elementValue" /></ctl:message>
                                                <xsl:choose>
                                                    <xsl:when test="$elementName='Position'">
                                                        <xsl:variable name="positionChild" select="$definitionNode/*[1]" />
                                                        <xsl:variable name="positionChildName" select="local-name-from-QName(node-name($positionChild))" />
                                                        <ctl:message>Position child name:  <xsl:value-of select="$positionChildName" /></ctl:message>
                                                        <swe:Position>
                                                            <xsl:for-each select="$definitionNode/@*">
                                                                <xsl:variable name="attributeName" select="name()" />
                                                                <xsl:attribute name="{$attributeName}"><xsl:value-of select="." /></xsl:attribute>
                                                            </xsl:for-each>
                                                            <!--Can be time, location, orientation, velocity, angularVelocity, acceleration, angularAcceleration, or state-->
                                                            <xsl:choose>
                                                                <xsl:when test="$positionChildName='time'">
                                                                    <swe:time>
                                                                        <swe:Time>
                                                                            <swe:value></swe:value>
                                                                        </swe:Time>
                                                                    </swe:time>
                                                                </xsl:when>
                                                                <xsl:when test="$positionChildName='location'">
                                                                    <swe:location>
                                                                        <swe:Vector>           
                                                                            <xsl:variable name="coordinates" select="$positionChild/*[1]/*" />
                                                                            <ctl:message><xsl:value-of select="count($coordinates)" /></ctl:message>
                                                                            <xsl:for-each select="$coordinates">
                                                                                <xsl:variable name="coordinateName">
                                                                                    <xsl:value-of select="@name" />
                                                                                </xsl:variable>
                                                                                <ctl:message>Coordinate name:  <xsl:value-of select="$coordinateName" /></ctl:message>
                                                                                <xsl:variable name="coordinateChild" select="*[1]" />
                                                                                <xsl:variable name="coordinateChildName" select="local-name-from-QName(node-name($coordinateChild))" />
                                                                                <ctl:message>Coordinate child name:  <xsl:value-of select="$coordinateChildName" /></ctl:message>
                                                                                <swe:coordinate><xsl:attribute name="name"><xsl:value-of select="$coordinateName" /></xsl:attribute>
                                                                                    <xsl:element name="{$coordinateChildName}" namespace="http://www.opengis.net/swe/1.0">
                                                                                        <xsl:for-each select="$coordinateChild/@*">
                                                                                            <xsl:variable name="attributeName" select="name()" />
                                                                                            <xsl:attribute name="{$attributeName}"><xsl:value-of select="." /></xsl:attribute>
                                                                                            <ctl:message><xsl:value-of select="$attributeName" />:  <xsl:value-of select="." /></ctl:message>                                                                                        
                                                                                        </xsl:for-each>
                                                                                        <xsl:for-each select="$coordinateChild/*">
                                                                                            <xsl:variable name="childName" select="local-name-from-QName(node-name(.))" />
                                                                                            <xsl:if test="not($childName='constraint')">
                                                                                                <xsl:element name="{$childName}" namespace="http://www.opengis.net/swe/1.0">
                                                                                                    <xsl:for-each select="@*">
                                                                                                        <xsl:variable name="attributeName" select="name()" />
                                                                                                        <xsl:attribute name="{$attributeName}"><xsl:value-of select="." /></xsl:attribute>
                                                                                                    </xsl:for-each>
                                                                                                    <xsl:value-of select="." />
                                                                                                </xsl:element>
                                                                                            </xsl:if>
                                                                                        </xsl:for-each>
                                                                                        <xsl:variable name="updatedInputID" select="concat($parameterID,'_',translate($coordinateName,' ','_'),'_Value')" />
                                                                                        <ctl:message>Updated input ID:  <xsl:value-of select="$updatedInputID" /></ctl:message>
                                                                                        <xsl:variable name="updatedInputIDValue" select="$enterTaskingOptionsForm/values/value[@key=$updatedInputID]" />
                                                                                        <ctl:message><xsl:value-of select="$updatedInputIDValue" /></ctl:message>
                                                                                        <swe:value><xsl:value-of select="$updatedInputIDValue" /></swe:value>
                                                                                    </xsl:element>
                                                                                </swe:coordinate>
                                                                            </xsl:for-each>
                                                                        </swe:Vector>
                                                                    </swe:location>
                                                                </xsl:when>
                                                                <xsl:when test="$positionChildName='orientation'">
                                                                    <swe:orientation>
                                                                    </swe:orientation>
                                                                </xsl:when>
                                                                <xsl:when test="$positionChildName='velocity'">
                                                                </xsl:when>
                                                                <xsl:when test="$positionChildName='angularVelocity'">
                                                                </xsl:when>
                                                                <xsl:when test="$positionChildName='acceleration'">
                                                                </xsl:when>
                                                                <xsl:when test="$positionChildName='angularAcceleration'">
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </swe:Position>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                         <!--//values/value[contains(@key='_Value')]-->
                                                        <xsl:element name="{$elementName}" namespace="http://www.opengis.net/swe/1.0">
                                                            <swe:value>
                                                                <xsl:value-of select="$elementValue" />
                                                            </swe:value>
                                                        </xsl:element>
                                                    </xsl:otherwise>
                                                </xsl:choose>                                             
                                            </sps:value>
                                        </sps:InputParameter>
                                    </xsl:if>
                                </xsl:for-each>
                            </sps:parameters>
                        </sps:sensorParam>
                        <sps:timeFrame>
                            <gml:TimeInstant>
                                <gml:timePosition>
                                    <xsl:value-of select="$enterTaskingOptionsForm/values/value[@key='timeFrame']" />
                                </gml:timePosition>
                            </gml:TimeInstant>
                        </sps:timeFrame>
                    </sps:Submit>
                </xsl:variable>
                <ctl:message>Valid Submit request constructed:  <xsl:copy-of select="$submitRequest" /></ctl:message>
                <!--Construct a Submit request with an invalid notificationTarget element-->
                <xsl:variable name="submitRequestInvalidNotificationTarget">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="true()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with an invalid notificationTarget element:  <xsl:copy-of select="$submitRequestInvalidNotificationTarget/*" /></ctl:message>
                <!--Construct a Submit request with an invalid sensorID element-->
                <xsl:variable name="submitRequestInvalidSensorID">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="string('')" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with an invalid sensorID element:  <xsl:copy-of select="$submitRequestInvalidSensorID/*" /></ctl:message>
                <!--Construct a Submit request with an invalid parameter elements-->
                <xsl:variable name="submitRequestInvalidParameters">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="true()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with invalid parameters:  <xsl:copy-of select="$submitRequestInvalidParameters/*" /></ctl:message>
                <!--Construct a Submit request with a missing required parameter elements-->
                <xsl:variable name="submitRequestMissingRequiredParameters">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="true()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with missing required parameters:  <xsl:copy-of select="$submitRequestMissingRequiredParameters/*" /></ctl:message>
                <!--Construct a Submit request with an invalid timeFrame element-->
                <xsl:variable name="submitRequestInvalidTimeFrame">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="true()" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with an invalid timeFrame element:  <xsl:copy-of select="$submitRequestInvalidTimeFrame/*" /></ctl:message>
                <!--Execute the valid Submit request-->
                <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <parsers:XMLValidatingParser>
                            <parsers:schemas>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('spsSubmitRequestResponse.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                            </parsers:schemas>
                        </parsers:XMLValidatingParser>
                    </ctl:request>
                </xsl:variable>
                <!--Get the approximate time the request was submitted.  This will be used for later tests-->
                <xsl:variable name="submitTime">
                    <!--<ctl:call-function name="spsFunctions:getCurrentDateTime" />-->
                    <xsl:value-of select="current-dateTime()" />
                </xsl:variable>
                <ctl:message>Submit request submitted at:  <xsl:value-of select="$submitTime" /></ctl:message>
                <!--Call the other request tests using the Submit request that was constructed previously-->
                <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamParametersExpectedResponse.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequest" />
                  <ctl:with-param name="submitResponse" select="$submitResponse" />
                </ctl:call-test>
                <ctl:call-test name="sps:core-SPS.Submit-RequestInvalidNotificationTarget.1">
                    <ctl:with-param name="submitURL" select="$submitURL" />
                    <ctl:with-param name="submitRequest" select="$submitRequestInvalidNotificationTarget" />
                </ctl:call-test>
                <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamInvalidSensorID.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequestInvalidSensorID" />
                </ctl:call-test>
                <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamInvalidParameters.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequestInvalidParameters" />
                </ctl:call-test>
                <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamParametersMissingRequiredParameters.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequestMissingRequiredParameters" />
                </ctl:call-test>
                <ctl:call-test name="sps:core-SPS.Submit-RequestValidTimeFrame.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequestInvalidTimeFrame" />
                </ctl:call-test>
                <!--Call the response tests using the Submit response from the user input-->
                <ctl:call-test name="sps:core-SPS.Submit-ResponseMain.1">
                    <ctl:with-param name="submitURL" select="$submitURL" />
                    <ctl:with-param name="submitRequest" select="$submitRequest" />
                    <ctl:with-param name="submitResponse" select="$submitResponse" />
                    <ctl:with-param name="submitTime" select="$submitTime" />
                </ctl:call-test>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestInvalidNotificationTarget.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>Invalid data in the notificationTarget element of a Submit request produces a valid exception message.</ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value that is valid for the Submit operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid notification target information correctly.  This includes notificationID being null and notificationURL being unresolvable to a valid WNS.">ATS_URL#SPS.Submit-RequestInvalidNotificationTarget</ctl:link>
      <ctl:code>
        <!--Replace the notificationID in a valid request with an invalid notificationID-->
        <!--Replace the notificationURL in a valid request with an invalid notificationURL-->
        <!--Replace the notificationID and notificationURL in a valid request with invalid values-->
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <parsers:XMLValidatingParser>
                            <parsers:schemas>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('spsSubmitRequestResponse.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                            </parsers:schemas>
                        </parsers:XMLValidatingParser>
                    </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with an invalid notificationTarget element was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to a Submit request with an invalid notificationTarget element.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReportToCheck" select="$submitResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('notificationTarget')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  An exception report with an exceptionCode value of "InvalidParameterValue" and a locator value of "notificationTarget" was expected.  "<xsl:value-of select="$submitRequest" />" was returned instead.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamInvalidSensorID.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>The server returns a valid exception message with a value of UnknownSensorID for the exceptionCode and the unknown sensorID for the locator. </ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value of UnknownSensorID and a locator value listing the unknown sensorID; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a valid exception message when an invalid sensorID is provided in the request.">ATS_URL#SPS.Submit-RequestSensorParamInvalidSensorID</ctl:link>
      <ctl:code>
        <!--Replace the sensorID in a valid request with an invalid value-->
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <parsers:XMLValidatingParser>
                            <parsers:schemas>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('spsSubmitRequestResponse.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                            </parsers:schemas>
                        </parsers:XMLValidatingParser>
                    </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with an invalid sensorID element was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of response to a Submit request with an invalid sensorID element</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReportToCheck" select="$submitResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('UnknownSensorID')" />
                        <ctl:with-param name="locatorToCheck" select="string('')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  An exception report with an exceptionCode value of "UnknownSensorID" and a locator value of "" was expected.  "<xsl:value-of select="$submitRequest" />" was returned instead.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamInvalidParameters.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of rejected when invalid parameter values are supplied in the request. </ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of rejected; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of rejected when invalid parameter values are supplied in the request.">ATS_URL#SPS.Submit-RequestSensorParamInvalidParameters</ctl:link>
      <ctl:code>
        <!--Replace the parameterID value(s) in a valid Submit request with invalid values-->
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <parsers:XMLValidatingParser>
                            <parsers:schemas>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('spsSubmitRequestResponse.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                            </parsers:schemas>
                        </parsers:XMLValidatingParser>
                    </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with invalid parameter values was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="status" select="$submitResponse//sps:status" />
                <xsl:if test="not($status='rejected')">
                    <ctl:message>FAILURE:  The server returned a valid Submit response, but the status element was expected to be "rejected" instead of "<xsl:value-of select="$status" />".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamParametersMissingRequiredParameters.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of incomplete request when required parameters are missing from the request.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of incomplete request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of incomplete request when required parameters are missing from the request.">ATS_URL#SPS.Submit-RequestSensorParamParametersMissingRequiredParameters</ctl:link>
      <ctl:code>
        <!--Eliminate one or more required parameters from a valid Submit request-->
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <parsers:XMLValidatingParser>
                            <parsers:schemas>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('spsSubmitRequestResponse.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                            </parsers:schemas>
                        </parsers:XMLValidatingParser>
                    </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with missing required parameters was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="status" select="$submitResponse//sps:status" />
                <xsl:if test="not($status='incomplete request')">
                    <ctl:message>FAILURE:  The server returned a valid Submit response, but the status element was expected to be "incomplete request" instead of "<xsl:value-of select="$status" />".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamParametersExpectedResponse.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:param name="submitResponse" />
      <ctl:assertion>The server returns a valid Submit response with expected values given the parameter values supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the values for the parameters are expected based on the request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns an expected Submit response given the parameter values in the request.  Test various parameter combinations.">ATS_URL#SPS.Submit-RequestSensorParamParametersExpectedResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with invalid parameter values was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="submitResponseForm">
                    <ctl:form height="640" width="800">
                        <body>
                            <p>
                                <h2>The server returned the following response to the valid Submit request you created earlier:</h2>
                                <table id="submitResponseTable" border="1" padding="4" bgcolor="#00ffff">
                                <xsl:choose>
                                    <xsl:when test="$submitResponse//ows:Exception">
                                        <caption>Exception Report</caption>
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Value</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>
                                                    exceptionCode:
                                                </td>
                                                <td>
                                                    <xsl:value-of select="$submitResponse//ows:Exception/@exceptionCode" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    locator:
                                                </td>
                                                <td>
                                                    <xsl:value-of select="$submitResponse//ows:Exception/@locator" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    Exception Text:
                                                </td>
                                                <td>
                                                    <xsl:value-of select="$submitResponse//ows:Exception/ows:ExceptionText" />
                                                </td>
                                            </tr>
                                        </tbody>
                                    </xsl:when>
                                    <xsl:otherwise>
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Value</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>taskID:</td>
                                                    <td><xsl:value-of select="$submitResponse//sps:taskID" /></td>
                                                </tr>
                                                <tr>
                                                    <td>status:</td>
                                                    <td><xsl:value-of select="$submitResponse//sps:status" /></td>
                                                </tr>
                                                <tr>
                                                    <td>description:</td>
                                                    <td><xsl:value-of select="$submitResponse//gml:description" /></td>
                                                </tr>
                                                <tr>
                                                    <td>estimatedToC:</td>
                                                    <td><xsl:value-of select="$submitResponse//sps:estimatedToC" /></td>
                                                </tr>
                                                <tr>
                                                    <td>alternative:</td>
                                                    <td>
                                                        <xsl:for-each select="$submitResponse//sps:alternative">
                                                            <xsl:value-of select="." />
                                                        </xsl:for-each>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>LatestResponseTime:</td>
                                                    <td><xsl:value-of select="$submitResponse//sps:LatestResponseTime" /></td>
                                                </tr>
                                            </tbody>
                                    </xsl:otherwise>
                                </xsl:choose>
                                </table>
                                <h2>Is this the expected response?</h2>
                                <input type="submit" name="answer" value="yes" />
                                <input type="submit" name="answer" value="no" />
                            </p>
                        </body>
                    </ctl:form>
                </xsl:variable>
                <xsl:if test="$submitResponseForm//values/value[@key='answer']='no'">
                    <ctl:message>FAILURE:  The response to a valid Submit request was not what the user expected.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestValidTimeFrame.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of rejected when an invalid time value (before the current time, etc.) is supplied in the timeFrame parameter.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of "rejected"; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of rejected when an invalid time value is supplied in the timeFrame parameter.">ATS_URL#SPS.Submit-RequestValidTimeFrame</ctl:link>
      <ctl:code>
        <!--Modify the timeFrame value to occur in the past-->
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <parsers:XMLValidatingParser>
                            <parsers:schemas>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('spsSubmitRequestResponse.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                                <parsers:schema type="url">
                                    <ctl:call-function name="spsFunctions:getSchemaLocation">
                                        <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                    </ctl:call-function>
                                </parsers:schema>
                            </parsers:schemas>
                        </parsers:XMLValidatingParser>
                    </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with an invalid timeFrame element was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="status" select="$submitResponse//sps:status" />
                <ctl:message>Checking for a value in the status element.  The following value was returned "<xsl:value-of select="$status" />".</ctl:message>
                <xsl:if test="not($status='rejected')">
                    <ctl:message>FAILURE:  The server returned a valid Submit response, but the status element value was expected to be "rejected" instead of "<xsl:value-of select="$status" />".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseMain.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:param name="submitResponse" />
      <ctl:param name="submitTime" />
      <ctl:assertion>The response to a valid Submit request contains valid values for its sub-elements</ctl:assertion>
      <ctl:comment>Pass if the response is a valid SubmitRequestResponse document and the values of the sub-elements are valid</ctl:comment>
      <ctl:link title="">ATS_URL#SPS.Submit-ResponseMain</ctl:link>
      <ctl:code>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response for the Submit request, or the response was not valid according to the SubmitRequestResponse schema</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The Submit response contains the following elements:</ctl:message>
                <xsl:for-each select="$submitResponse/*">
                    <ctl:message>Element name:  <xsl:value-of select="local-name-from-QName(node-name(.))" /> (<xsl:value-of select="namespace-uri-from-QName(node-name(.))" />)</ctl:message>
                </xsl:for-each>
                <ctl:message>Checking these elements for validity...</ctl:message>
                <!--Validate taskID in the response-->
                <ctl:call-test name="sps:core-SPS.Submit-ResponseValidTaskID.1">
                    <ctl:with-param name="submitResponse" select="$submitResponse" />
                </ctl:call-test>
                <!--Validate estimatedToC in the response-->
                <ctl:call-test name="sps:core-SPS.Submit-ResponseValidEstimatedToC.1">
                    <ctl:with-param name="submitResponse" select="$submitResponse" />
                    <ctl:with-param name="submitTime" select="$submitTime" />
                </ctl:call-test>
                <!--Validate taskID in the response-->
                <xsl:if test="$submitResponse//sps:status[text()='rejected, alternatives available'] or count($submitResponse//sps:alternative)>0">
                    <ctl:call-test name="sps:core-SPS.Submit-ResponseCorrectUseOfAlternative.1">
                        <ctl:with-param name="submitResponse" select="$submitResponse" />
                    </ctl:call-test>
                </xsl:if>
                <!--Validate LatestResponseTime in the response-->
                <ctl:call-test name="sps:core-SPS.Submit-ResponseValidLatestResponseTime.1">
                    <ctl:with-param name="submitResponse" select="$submitResponse" />
                    <ctl:with-param name="submitTime" select="$submitTime" />
                </ctl:call-test>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseValidTaskID.1">
      <ctl:param name="submitResponse" />
      <ctl:assertion>The taskID parameter of a Submit response contains a value.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response and the taskID parameter of the response contains a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the taskID parameter of a Submit response contains a value.">ATS_URL#SPS.Submit-ResponseValidTaskID</ctl:link>
      <ctl:code>
        <xsl:variable name="taskID" select="$submitResponse//sps:taskID" />
        <ctl:message>Checking for a value in the taskID element.  The following value was returned "<xsl:value-of select="$taskID" />".</ctl:message>
        <xsl:if test="string-length(normalize-space($taskID))=0">
            <ctl:message>FAILURE:  The taskID in the response for the Submit request was null.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseValidEstimatedToC.1">
      <ctl:param name="submitResponse" />
      <ctl:param name="submitTime" />
      <ctl:assertion>If the estimatedToC element appears in the response, then this element contains a value that is a valid time value that occurs after the time the request was submitted.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response and the estimatedToC parameter of the response contains a value that is a valid time value and occurs after the time the request was submitted; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the estimatedToC parameter of a Submit response occurs after the time the request was submitted.">ATS_URL#SPS.Submit-ResponseValidEstimatedToC</ctl:link>
      <ctl:code>
        <xsl:variable name="estimatedToC">
            <xsl:value-of select="$submitResponse//sps:estimatedToC" />
        </xsl:variable>
        <xsl:if test="$estimatedToC">
            <xsl:variable name="isTimeValid">
                <ctl:call-function name="spsFunctions:checkTime">
                    <ctl:with-param name="timeToCheck" select="$estimatedToC" />
                    <ctl:with-param name="compareTime" select="$submitTime" />
                </ctl:call-function>
            </xsl:variable>
            <xsl:if test="not(xsd:boolean($isTimeValid))">
                <ctl:message>FAILURE:  The value in the estimatedToC element (<xsl:value-of select="$estimatedToC" />) is null or does not occur after the time the Submit request was submitted (<xsl:value-of select="$submitTime" />)</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseCorrectUseOfAlternative.1">
      <ctl:param name="submitResponse" />
      <ctl:assertion>If the status value is rejected, alternatives available, then a valid value is provided for the alternative parameter.  If a value is provided for the alternative parameter, then the status value is rejected, alternatives available.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response with a status of "rejected, alternatives available" and the alternative parameter is provided and has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the alternative parameter of a Submit response is used only when the status is rejected, alternatives available.">ATS_URL#SPS.Submit-ResponseCorrectUseOfAlternative</ctl:link>
      <ctl:code>
        <xsl:variable name="isStatusRejected" select="$submitResponse//sps:SubmitRequestResponse/sps:status[text()='rejected, alternatives available']" />
        <xsl:variable name="isAlternativeSupplied" select="$submitResponse//sps:SubmitRequestResponse/sps:alternative/*" />
        <xsl:if test="($isStatusRejected and not($isAlternativeSupplied)) or (not($isStatusRejected) and $isAlternativeSupplied)">
            <ctl:message>FAILURE:  When the status is "rejected, alternatives available", at least one alternative element should be supplied; when one or more alternative elements are supplied, then the status should be "rejected, alternatives available".</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseValidLatestResponseTime.1">
      <ctl:param name="submitResponse" />
      <ctl:param name="submitTime" />
      <ctl:assertion>The LatestResponseTime value of the Submit response is a valid time value that occurs after the time the request was submitted.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response with a LatestResponseTime parameter value time occuring after the time the request was submitted; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the LatestResponseTime parameter of a Submit response occurs after the time the request was submitted.">ATS_URL#SPS.Submit-ResponseValidLatestResponseTime</ctl:link>
      <ctl:code>
        <xsl:variable name="latestResponseTime">
            <xsl:value-of select="$submitResponse//sps:LatestResponseTime" />
        </xsl:variable>
        <xsl:if test="$latestResponseTime">
            <xsl:variable name="isTimeValid">
                <ctl:call-function name="spsFunctions:checkTime">
                    <ctl:with-param name="timeToCheck" select="$latestResponseTime" />
                    <ctl:with-param name="compareTime" select="$submitTime" />
                </ctl:call-function>
            </xsl:variable>
            <xsl:if test="not(xsd:boolean($isTimeValid))">
                <ctl:message>FAILURE:  The value in the LatestResponseTime element (<xsl:value-of select="$latestResponseTime" />) is null or does not occur after the time the Submit request was submitted (<xsl:value-of select="$submitTime" />)</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ValidException.1">
      <ctl:param name="submitResponse" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the Submit operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the Submit operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the Submit operation.">ATS_URL#SPS.Submit-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>FeasibilityIDExpired</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('Submit')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$submitResponse" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$submitResponse//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the Submit operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    
    <!--DescribeResultAccess tests-->
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNullSensorID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>A null sensorID in the request produces a valid exception message of InvalidParameterValue with sensorID listed in the locator field.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of InvalidParameterValue and sensorID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that a null sensorID in the request produces a valid exception message of InvalidParameterValue.">ATS_URL#SPS.DescribeResultAccess-RequestNullSensorID</ctl:link>
      <ctl:code>
        <!--
                    1.)  Issue a DescribeResultAccess request
                    2.)  Validate the response against the ExceptionReport schema
                    3.)  Check the values in the response
                -->
        <xsl:variable name="describeResultAccessRequestResponse">
            <!--<ctl:call-function name="spsFunctions:describeResultAccessRequest">
                <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                <ctl:with-param name="sensorOrTaskID" select="string('')" />
                <ctl:with-param name="type" select="sensorID" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps" service="SPS" version="1.0.0">
                            <sensorID></sensorID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsDescribeResultAccessRequestResponse.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a null sensorID parameter did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with a null sensorID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReportToCheck" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('sensorID')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a null sensorID parameter was expected to be an exception report with an exceptionCode of "InvalidParameterValue" and a locator value of "sensorID".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidSensorID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>An invalid sensorID in the request produces a valid exception message of UnknownSensorID.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of UnknownSensorID and the unknown sensorID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that an invalid sensorID in the request produces a valid exception message of UnknownSensorID.">ATS_URL#SPS.DescribeResultAccess-RequestInvalidSensorID</ctl:link>
      <ctl:code>
        <xsl:variable name="sensorID" select="string('lksadjflkadsjfkljdsafkweuoiuoiweruoiweklsajflksdajflkdsafjlksdajflksadfjlkdsfajkladfsjlkdasfjlkasdfj')" />
        <xsl:variable name="describeResultAccessRequestResponse">
            <!--<ctl:call-function name="spsFunctions:describeResultAccessRequest">
                <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                <ctl:with-param name="sensorOrTaskID" select="lksadjflkadsjfkljdsafkweuoiuoiweruoiweklsajflksdajflkdsafjlksdajflksadfjlkdsfajkladfsjlkdasfjlkasdfj" />
                <ctl:with-param name="type" select="sensorID" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$sensorID" /></sensorID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsDescribeResultAccessRequestResponse.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a sensorID parameter of "<xsl:value-of select="$sensorID" />" did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with an unknown sensorID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReportToCheck" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('UnknownSensorID')" />
                        <ctl:with-param name="locatorToCheck" select="$sensorID" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a sensorID parameter of "<xsl:value-of select="$sensorID" />" was expected to be an exception report with an exceptionCode of "UnknownSensorID" and a locator value of "<xsl:value-of select="$sensorID" />".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNullTaskID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>A null taskID in the request produces a valid exception message of InvalidParameterValue.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of InvalidParameterValue and taskID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that a null taskID in the request produces a valid exception message of InvalidParameterValue.">ATS_URL#SPS.DescribeResultAccess-RequestNullTaskID</ctl:link>
      <ctl:code>
        <xsl:variable name="describeResultAccessRequestResponse">
            <!--<ctl:call-function name="spsFunctions:describeResultAccessRequest">
                <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                <ctl:with-param name="sensorOrTaskID" select="lksadjflkadsjfkljdsafkweuoiuoiweruoiweklsajflksdajflkdsafjlksdajflksadfjlkdsfajkladfsjlkdasfjlkasdfj" />
                <ctl:with-param name="type" select="sensorID" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps" service="SPS" version="1.0.0">
                            <taskID></taskID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsDescribeResultAccessRequestResponse.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a null taskID parameter did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with a null taskID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReportToCheck" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('taskID')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a null taskID parameter was expected to be an exception report with an exceptionCode of "InvalidParameterValue" and a locator value of "taskID".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTaskID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>An invalid taskID in the request produces a valid exception message of TaskIDExpired.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value TaskIDExpired; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that an invalid taskID in the request produces a valid exception message of TaskIDExpired.">ATS_URL#SPS.DescribeResultAccess-RequestInvalidTaskID</ctl:link>
      <ctl:code>
        <xsl:variable name="taskID" select="kaskjdfkltiowutoiwut098239825uuewioejriowerioweuqroiuwerqiouwerqiouerqiowwqoieriowqeriouioqweroiurewq" />
        <xsl:variable name="describeResultAccessRequestResponse">
            <!--<ctl:call-function name="spsFunctions:describeResultAccessRequest">
                <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                <ctl:with-param name="sensorOrTaskID" select="lksadjflkadsjfkljdsafkweuoiuoiweruoiweklsajflksdajflkdsafjlksdajflksadfjlkdsfajkladfsjlkdasfjlkasdfj" />
                <ctl:with-param name="type" select="sensorID" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps" service="SPS" version="1.0.0">
                            <taskID><xsl:value-of select="$taskID" /></taskID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsDescribeResultAccessRequestResponse.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a taskID parameter of "<xsl:value-of select="$taskID" />" did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with an unknown taskID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReportToCheck" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('TaskIDExpired')" />
                        <ctl:with-param name="locatorToCheck" select="string('*')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a taskID parameter of "<xsl:value-of select="$taskID" />" was expected to be an exception report with an exceptionCode of "TaskIDExpired".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseMain.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>All assertions applicable to a DescribeResultAccess response are satisfied.</ctl:assertion>
      <ctl:comment>Fail if any of the DescribeResultAccess response assertions fail; pass otherwise.</ctl:comment>
      <ctl:link title="Verify that a valid request containing a sensorID parameter produces a valid response other than DataNotAvailable.">ATS_URL#SPS.DescribeResultAccess-ResponseSensorIDValidResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--Call each of the DescribeResultAccess sub-tests using SensorID values from the Capabilities document-->
        <xsl:for-each select="$getCapabilitiesResponse/sps:Contents/sps:SensorOfferings//sps:SensorOffering/sps:SensorID">
            <xsl:variable name="sensorID" select="." />
            <xsl:variable name="describeResultAccessRequestResponse">
            <!--<ctl:call-function name="spsFunctions:describeResultAccessRequest">
                <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                <ctl:with-param name="sensorOrTaskID" select="lksadjflkadsjfkljdsafkweuoiuoiweruoiweklsajflksdajflkdsafjlksdajflksadfjlkdsfajkladfsjlkdasfjlkasdfj" />
                <ctl:with-param name="type" select="sensorID" />
            </ctl:call-function>-->
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$sensorID" /></sensorID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsDescribeResultAccessRequestResponse.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
            </xsl:variable>
            <xsl:choose>
                <xsl:when test="not($describeResultAccessRequestResponse/*)">
                    <ctl:message>FAILURE:  Sending a valid DescribeResultAccess request with a sensorID parameter of "<xsl:value-of select="$sensorID" />" did not return a response or the response was not valid according to the expected schema.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--Check that the response is not a DataNotAvailable response-->
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseSensorIDValidResponse.1">
                        <ctl:with-param name="requestedSensorID" select="$sensorID" />
                        <ctl:with-param name="describeResultAccessResponse" select="$describeResultAccessRequestResponse" />
                    </ctl:call-test>
                    <!--Check that the ServiceType is valid-->
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
                        <ctl:with-param name="requestedSensorID" select="$sensorID" />
                        <ctl:with-param name="describeResultAccessResponse" select="$describeResultAccessRequestResponse" />
                    </ctl:call-test>
                    <!--Check that the ServiceURL is valid-->
                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
                        <ctl:with-param name="requestedSensorID" select="$sensorID" />
                        <ctl:with-param name="describeResultAccessResponse" select="$describeResultAccessRequestResponse" />
                    </ctl:call-test>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseSensorIDValidResponse.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeResultAccessResponse" />
      <ctl:assertion>A valid sensorID in the request does not produce a DataNotAvailable response.</ctl:assertion>
      <ctl:comment>Fail if the response is a DataNotAvailable response when the request contained a valid sensorID; pass otherwise.</ctl:comment>
      <ctl:link title="Verify that a valid request containing a sensorID parameter produces a valid response other than DataNotAvailable.">ATS_URL#SPS.DescribeResultAccess-ResponseSensorIDValidResponse</ctl:link>
      <ctl:code>
        <!--Check for a DataNotAvailable response-->
        <xsl:if test="$describeResultAccessResponse//sps:DataNotAvailable">
            <ctl:message>FAILURE:  A DescribeResultAccess request with a sensorID value of "<xsl:value-of select="$requestedSensorID" />" produced a DataNotAvailable response.  A DataNotAvailable response should only be produced for taskID requests.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeResultAccessResponse" />
      <ctl:assertion>The ServiceType value in the response contains a value.</ctl:assertion>
      <ctl:comment>Pass if the ServiceType in the response contains a value; fail otherwise</ctl:comment>
      <ctl:link title="Verify that the ServiceType in the response contains a value.">ATS_URL#SPS.DescribeResultAccess-ResponseValidServiceType</ctl:link>
      <ctl:code>
        <!--Check to see if the ServiceType element contains a value-->
        <xsl:variable name="serviceType" select="$describeResultAccessResponse/sps:ServiceType" />
        <xsl:if test="string-length(normalize-space($serviceType))=0">
            <ctl:message>FAILURE:  The ServiceType value in a DescribeResultAccess response for sensorID <xsl:value-of select="$requestedSensorID" /> is null.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeResultAccessResponse" />
      <ctl:assertion>The ServiceURL value in the response contains a value and is resolvable.</ctl:assertion>
      <ctl:comment>Pass if the ServiceType in the response contains a value and is resolvable; fail otherwise</ctl:comment>
      <ctl:link title="Verify that the ServiceURL in the response contains a value and that value is resolvable.">ATS_URL#SPS.DescribeResultAccess-ResponseValidServiceURL</ctl:link>
      <ctl:code>
        <!--Check to see if the ServiceURL is valid-->
        <xsl:variable name="serviceURL" select="$describeResultAccessResponse/sps:ServiceURL" />
        <![CDATA[/*
        <xsl:if test="string-length(normalize-space($serviceURL))=0">
            <ctl:message>The ServiceURL value in a DescribeResultAccess response for sensorID <xsl:value-of select="$requestedSensorID" /> is null.</ctl:message>
            <ctl:fail />
        </xsl:if>-->
        <xsl:if test="not(matches($serviceURL,'(^|[ \t\r\n])((ftp|http|https|gopher|mailto|news|nntp|telnet|wais|file|prospero|aim|webcal):(([A-Za-z0-9$_.+!*(),;/?:@&amp;~=-])|%[A-Fa-f0-9]{2}){2,}(#([a-zA-Z0-9][a-zA-Z0-9$_.+!*(),;/?:@&amp;~=%-]*))?([A-Za-z0-9$_+!*();/?:~-]))','i'))"><!--(^|[ \t\r\n])((ftp|http|https|gopher|mailto|news|nntp|telnet|wais|file|prospero|aim|webcal):(([A-Za-z0-9$_.+!*(),;/?:@&~=-])|%[A-Fa-f0-9]{2}){2,}(#([a-zA-Z0-9][a-zA-Z0-9$_.+!*(),;/?:@&~=%-]*))?([A-Za-z0-9$_+!*();/?:~-]))-->
            <ctl:message>The ServiceURL value in a DescribeResultAccess response for sensorID <xsl:value-of select="$requestedSensorID" /> is not a valid URL</ctl:message>
            <ctl:fail />
        </xsl:if>
        */]]>
        <xsl:variable name="isValidURL">
            <ctl:call-function name="spsFunctions:validateURL">
                <ctl:with-param name="urlString" select="$serviceURL" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="not(xsd:boolean(isValidURL))">
            <ctl:message>FAILURE:  The ServiceURL value in a DescribeResultAccess response for sensorID <xsl:value-of select="$requestedSensorID" /> is either null or does not have the proper syntax for a URL.</ctl:message>
            <ctl:fail />
        </xsl:if>
        <!--Ensure that the service identified through the ServiceURL element is up and running-->
        <xsl:variable name="serviceURLResponse">
            <ctl:request>
                <ctl:url><xsl:value-of select="$serviceURL" /></ctl:url>
                <ctl:method>get</ctl:method>
            </ctl:request>
        </xsl:variable>
        <xsl:if test="not($serviceURLResponse//ctl:response/*)">
            <ctl:message>FAILURE:  No response was returned from a request to "<xsl:value-of select="$serviceURL" />".</ctl:message>
            <ctl:fail />
        </xsl:if>
        <xsl:if test="not($serviceURLResponse//ctl:response/ctl:status/@code=200)">
            <ctl:message>FAILURE:  A response was returned from a request to "<xsl:value-of select="$serviceURL" />", but the status code of the response did not indicate success.</ctl:message>
            <ctl:fail />
        </xsl:if>
        <!--TODO:  Check for request element?-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseValidDataNotAvailable.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>A DataNotAvailable response is valid and contains values for each of the parameters.</ctl:assertion>
      <ctl:comment>Pass if the DataNotAvailable response is valid and contains a value for each of the parameters; fail otherwise</ctl:comment>
      <ctl:link title="Verify that a DataNotAvailable response is valid and contains values for each of the parameters.">ATS_URL#SPS.DescribeResultAccess-ResponseValidDataNotAvailable</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  DescribeResultAccess request with a previously generated taskID or with an empty string for the taskID.
                    2.)  Validate response according to the DescribeResultAccessRequestResponse schema
                    3.)  Iterate through the key parameters of the DescribeResultAccess response to ensure that each parameter/element contains a value
                -->
        <xsl:variable name="taskID" select="string('')" />
        <xsl:variable name="describeResultAccessResponse">
            <!--<ctl:call-function name="spsFunctions:describeResultAccessRequest">
                <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                <ctl:with-param name="sensorOrTaskID" select="$taskID" />
                <ctl:with-param name="type" select="taskID" />
            </ctl:call-function>-->
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps" service="SPS" version="1.0.0">
                            <taskID><xsl:value-of select="$taskID" /></taskID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('spsDescribeResultAccessRequestResponse.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
        </xsl:variable>
        <!--Validate-->
        <xsl:choose>
            <xsl:when test="not($describeResultAccessResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response from a DescribeResultAccess request with a taskID of "<xsl:value-of select="$taskID" />", or the response was not valid according to the DescribeResultAccessRequestResponse schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="dataNotAvailableElement" select="$describeResultAccessResponse/sps:DataNotAvailable" />
                <xsl:choose>
                    <xsl:when test="$dataNotAvailableElement">
                        <xsl:variable name="reason" select="normalize-space($dataNotAvailableElement/sps:reason)" />
                        <xsl:if test="string-length(normalize-space($reason))=0">
                            <ctl:message>FAILURE:  The DescribeResultAccess request for taskID <xsl:value-of select="$taskID" /> produced a DataNotAvailable response with an empty string for the reason element.</ctl:message>
                            <ctl:fail />
                        </xsl:if>
                    </xsl:when>
                <xsl:otherwise>
                    <ctl:message>FAILURE:  The DescribeResultAccess response for taskID <xsl:value-of select="$taskID" /> was expected to be a DataNotAvailable response.  "<xsl:value-of select="$describeResultAccessResponse/*" />" was returned instead.</ctl:message>
                    <ctl:fail />
                </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ValidException.1">
      <ctl:param name="describeResultAccessDocument" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the DescribeResultAccess operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the DescribeResultAccess operation; fail otherwise</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the DescribeResultAccess operation.">ATS_URL#SPS.DescribeResultAccess-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UnknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>TaskIDExpired</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('DescribeResultAccess')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$describeResultAccessDocument" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describeResultAccessDocument//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the DescribeResultAccess operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
  </ctl:package>
</ctl:package>