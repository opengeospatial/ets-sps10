<?xml version="1.0" encoding="utf-8"?>
<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:ocp="http://www.occamlab.com/te/parsers" xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:saxon="http://saxon.sf.net/" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="TARGET_NAMESPACE_URI" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db5="http://docbook.org/ns/docbook">
  <ctl:suite name="tns:suite">
    <!--NOTE: Don't forget to update the TARGET_NAMESPACE_URI and ATS_URL placeholder values-->
    <ctl:title>Annex A - Abstract Test Suite for SPS 1.0</ctl:title>
    <ctl:starting-test>tns:Main</ctl:starting-test>
  </ctl:suite>
  <ctl:test name="tns:Main">
    <ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="test.document" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" />
      <ctl:call-test name="tns:ows-main">
        <ctl:with-param name="test.document" select="$test.document" />
      </ctl:call-test>
      <ctl:call-test name="tns:general-main">
        <ctl:with-param name="test.document" select="$test.document" />
      </ctl:call-test>
      <ctl:call-test name="tns:core-main">
        <ctl:with-param name="test.document" select="$test.document" />
      </ctl:call-test>
    </ctl:code>
  </ctl:test>
  <ctl:package>
    <ctl:test name="tns:ows-main">
      <ctl:param name="test.document" />
      <ctl:assertion>All assertions for "ows" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the ows module.</ctl:comment>
      <ctl:link title="1. OWS">ATS_URL#ows</ctl:link>
      <ctl:code>
        <ctl:call-test name="tns:ows-OWS.ClientError.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:ows-OWS.ContentType.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:ows-OWS.CaseInsensitiveKvpNames.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:ows-OWS.GetCapabilities.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:ows-OWS.GetCapabilities-Exceptions.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:ows-OWS.GetCapabilities-AcceptVersions.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:ows-OWS.GetCapabilities-Sections.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:ows-OWS.GetCapabilities-AcceptFormats.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.ClientError.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Client error">ATS_URL#OWS.ClientError</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.ContentType.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Content-Type response header">ATS_URL#OWS.ContentType</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.CaseInsensitiveKvpNames.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="KVP parameter names">ATS_URL#OWS.CaseInsensitiveKvpNames</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.GetCapabilities.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities request">ATS_URL#OWS.GetCapabilities</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.GetCapabilities-Exceptions.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - Exceptions">ATS_URL#OWS.GetCapabilities-Exceptions</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.GetCapabilities-AcceptVersions.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - AcceptVersions parameter">ATS_URL#OWS.GetCapabilities-AcceptVersions</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.GetCapabilities-Sections.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - Sections parameter">ATS_URL#OWS.GetCapabilities-Sections</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:ows-OWS.GetCapabilities-AcceptFormats.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="GetCapabilities - AcceptFormats parameter">ATS_URL#OWS.GetCapabilities-AcceptFormats</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
  </ctl:package>
  <ctl:package>
    <ctl:test name="tns:general-main">
      <ctl:param name="test.document" />
      <ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the general module.</ctl:comment>
      <ctl:link title="2. General">ATS_URL#general</ctl:link>
      <ctl:code>
        <ctl:call-test name="tns:general-SPS.General-InvalidRequest.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:general-SPS.General-ValidResponse.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:general-SPS.General-InvalidRequest.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Verify that an invalid request produces an appropriate response from the server.">ATS_URL#SPS.General-InvalidRequest</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:general-SPS.General-ValidResponse.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Test purpose</ctl:assertion>
      <ctl:comment>Test method</ctl:comment>
      <ctl:link title="Verify that a response entity is schema-valid">ATS_URL#SPS.General-ValidResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
  </ctl:package>
  <ctl:package>
    <ctl:test name="tns:core-main">
      <ctl:param name="test.document" />
      <ctl:assertion>All assertions for "core" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the core module.</ctl:comment>
      <ctl:link title="3. Core">ATS_URL#core</ctl:link>
      <ctl:code>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeTasking-RequestInvalidSensorIDs.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeTasking-RequestNullSensorID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeTasking-ResponseMatchingSensorIDs.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeTasking-ResponseValidInputDescriptor.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeTasking-ResponseValidInputDescriptorParameterID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeTasking-ValidException.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-RequestInvalidNotificationTarget.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-RequestSensorParamInvalidSensorID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-RequestSensorParamInvalidParameters.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-RequestSensorParamParametersMissingRequiredParameters.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-RequestSensorParamParametersExpectedResponse.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-RequestValidTimeFrame.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-ResponseValidTaskID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-ResponseValidEstimatedToC.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-ResponseCorrectUseOfAlternative.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-ResponseValidLatestResponseTime.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.Submit-ValidException.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-RequestNullSensorID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-RequestInvalidSensorID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-RequestNullTaskID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-RequestInvalidTaskID.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-ResponseSensorIDValidResponse.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-ResponseValidDataNotAvailable.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
        <ctl:call-test name="tns:core-SPS.DescribeResultAccess-ValidException.1">
          <ctl:with-param name="test.document" select="$test.document" />
        </ctl:call-test>
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid error report message with an exception code of MissingParameterValue when mandatory parameters are missing from the request.</ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains MissingParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles missing parameters correctly.">ATS_URL#SPS.GetCapabilities-KVPRequestParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue when the service key value is not SPS. </ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid service key values correctly.">ATS_URL#SPS.GetCapabilities-KVPRequestServiceParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue when the request key value is not GetCapabilities. </ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid request key values correctly.">ATS_URL#SPS.GetCapabilities-KVPRequestRequestParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The OperationsMetadata section lists the mandatory operations of the SPS.</ctl:assertion>
      <ctl:comment>Pass if the service lists the GetCapabilities, DescribeTasking, Submit, and DescribeResultAccess operations with the proper bindings in the OperationsMetadata section; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the OperationsMetadata section advertises the mandatory operations of the SPS.">ATS_URL#SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Any non-mandatory operations advertised in the OperationsMetadata section have valid SPS method names.</ctl:assertion>
      <ctl:comment>Pass if the service lists operations in addition to the mandatory operations, and each of the advertised operations has a valid SPS operation name; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any non-mandatory operations listed in the OperationsMetadata section are valid SPS operation names.  This is still up for debate and will probably not be part of the final tests.">ATS_URL#SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Each SensorOffering sub-element (AreaOfService, Phenomenon, SensorDefinition, and SensorID) has a value.</ctl:assertion>
      <ctl:comment>Pass if each sub-element of a SensorOffering element has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each SensorOffering has appropriate values for its sub-elements.">ATS_URL#SPS.GetCapabilities-ResponseContentsSensorOfferings</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The SensorDefinition element of each SensorOffering element links to a valid SensorML or TML document.</ctl:assertion>
      <ctl:comment>Pass if the SensorDefinition element of each SensorOffering element links to a valid SensorML or TML document; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the value provided in the SensorDefinition field of each SensorOffering links to a valid SensorML or TML document.">ATS_URL#SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Each PhenomenonOffering sub-element (Phenomenon and SensorID) has a value.</ctl:assertion>
      <ctl:comment>Pass if each PhenomenonOffering sub-element has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each PhenomenonOffering has appropriate values for its sub-elements.">ATS_URL#SPS.GetCapabilities-ResponseContentsPhenomenonOfferings</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeTasking-RequestInvalidSensorIDs.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid error report message with a value of UnknownSensorID for the exceptionCode parameter and a list of the unknown sensor IDs in the locator parameter when one or more invalid sensor ID(s) are supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of UnknownSensorID and a list of the unknown sensor IDs in the locator parameter; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid sensor ID(s) correctly.">ATS_URL#SPS.DescribeTasking-RequestInvalidSensorIDs</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeTasking-RequestNullSensorID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when no SensorID value is supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles a request with a null SensorID correctly.">ATS_URL#SPS.DescribeTasking-RequestNullSensorID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeTasking-ResponseMatchingSensorIDs.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The sensorID field of each TaskingDescriptor element is one of the SensorID values provided in the request.</ctl:assertion>
      <ctl:comment>Pass if the SensorID value in each TaskingDescriptor element is one of the SensorID values supplied in the DescribeTasking request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the sensorID field of each TaskingDescriptor element is one of the SensorID values provided in the request.">ATS_URL#SPS.DescribeTasking-ResponseMatchingSensorIDs</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeTasking-ResponseValidInputDescriptor.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Each InputDescriptor element contains appropriate values for its sub-elements.</ctl:assertion>
      <ctl:comment>Pass if each InputDescriptor element contains values for each of its sub-elements and these sub-element values appear to be valid; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each InputDescriptor element contains appropriate values for its sub-elements.  This is probably tested through schema validation, so this test may be unnecessary.">ATS_URL#SPS.DescribeTasking-ResponseValidInputDescriptor</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeTasking-ResponseValidInputDescriptorParameterID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The parameterID of each InputDescriptor element contains a value.</ctl:assertion>
      <ctl:comment>Pass if the parameterID element of each InputDescriptor element contains a value and each parameterID element has a unique value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the parameterID of each InputDescriptor element contains a value.">ATS_URL#SPS.DescribeTasking-ResponseValidInputDescriptorParameterID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeTasking-ValidException.1">
      <ctl:param name="test.document" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the DescribeTasking operation.</ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value that is valid for the DescribeTasking operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the DescribeTasking operation">ATS_URL#SPS.DescribeTasking-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-RequestInvalidNotificationTarget.1">
      <ctl:param name="test.document" />
      <ctl:assertion>Invalid data in the notificationTarget element of a Submit request produces a valid exception message.</ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value that is valid for the Submit operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid notification target information correctly.  This includes notificationID being null and notificationURL being unresolvable to a valid WNS.">ATS_URL#SPS.Submit-RequestInvalidNotificationTarget</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-RequestSensorParamInvalidSensorID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid exception message with a value of UnknownSensorID for the exceptionCode and the unknown sensorID for the locator. </ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value of UnknownSensorID and a locator value listing the unknown sensorID; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a valid exception message when an invalid sensorID is provided in the request.">ATS_URL#SPS.Submit-RequestSensorParamInvalidSensorID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-RequestSensorParamInvalidParameters.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of rejected when invalid parameter values are supplied in the request. </ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of rejected; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of rejected when invalid parameter values are supplied in the request.">ATS_URL#SPS.Submit-RequestSensorParamInvalidParameters</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-RequestSensorParamParametersMissingRequiredParameters.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of incomplete request when required parameters are missing from the request.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of incomplete request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of incomplete request when required parameters are missing from the request.">ATS_URL#SPS.Submit-RequestSensorParamParametersMissingRequiredParameters</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-RequestSensorParamParametersExpectedResponse.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid Submit response with expected values given the parameter values supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the values for the parameters are expected based on the request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns an expected Submit response given the parameter values in the request.  Test various parameter combinations.">ATS_URL#SPS.Submit-RequestSensorParamParametersExpectedResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-RequestValidTimeFrame.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of rejected when an invalid time value (before the current time, etc.) is supplied in the timeFrame parameter.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of "rejected"; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of rejected when an invalid time value is supplied in the timeFrame parameter.">ATS_URL#SPS.Submit-RequestValidTimeFrame</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-ResponseValidTaskID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The taskID parameter of a Submit response contains a value.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response and the taskID parameter of the response contains a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the taskID parameter of a Submit response contains a value.">ATS_URL#SPS.Submit-ResponseValidTaskID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-ResponseValidEstimatedToC.1">
      <ctl:param name="test.document" />
      <ctl:assertion>If the estimatedToC element appears in the response, then this element contains a value that is a valid time value that occurs after the time the request was submitted.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response and the estimatedToC parameter of the response contains a value that is a valid time value and occurs after the time the request was submitted; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the estimatedToC parameter of a Submit response occurs after the time the request was submitted.">ATS_URL#SPS.Submit-ResponseValidEstimatedToC</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-ResponseCorrectUseOfAlternative.1">
      <ctl:param name="test.document" />
      <ctl:assertion>If the status value is rejected, alternatives available, then a valid value is provided for the alternative parameter.  If a value is provided for the alternative parameter, then the status value is rejected, alternatives available.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response with a status of "rejected, alternatives available" and the alternative parameter is provide and has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the alternative parameter of a Submit response is used only when the status is rejected, alternatives available.">ATS_URL#SPS.Submit-ResponseCorrectUseOfAlternative</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-ResponseValidLatestResponseTime.1">
      <ctl:param name="test.document" />
      <ctl:assertion>he LatestResponseTime value of the Submit response is a valid time value that occurs after the time the request was submitted.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response with a LatestResponseTime parameter value time occuring after the time the request was submitted; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the LatestResponseTime parameter of a Submit response occurs after the time the request was submitted.">ATS_URL#SPS.Submit-ResponseValidLatestResponseTime</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.Submit-ValidException.1">
      <ctl:param name="test.document" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the Submit operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the Submit operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the Submit operation.">ATS_URL#SPS.Submit-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-RequestNullSensorID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>A null sensorID in the request produces a valid exception message of InvalidParameterValue with sensorID listed in the locator field.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of InvalidParameterValue and sensorID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that a null sensorID in the request produces a valid exception message of InvalidParameterValue.">ATS_URL#SPS.DescribeResultAccess-RequestNullSensorID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-RequestInvalidSensorID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>An invalid sensorID in the request produces a valid exception message of UnknownSensorID.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of UnknownSensorID and the unknown sensorID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that an invalid sensorID in the request produces a valid exception message of UnknownSensorID.">ATS_URL#SPS.DescribeResultAccess-RequestInvalidSensorID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-RequestNullTaskID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>A null taskID in the request produces a valid exception message of InvalidParameterValue.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of InvalidParameterValue and taskID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that a null taskID in the request produces a valid exception message of InvalidParameterValue.">ATS_URL#SPS.DescribeResultAccess-RequestNullTaskID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-RequestInvalidTaskID.1">
      <ctl:param name="test.document" />
      <ctl:assertion>An invalid taskID in the request produces a valid exception message of TaskIDExpired.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value TaskIDExpired; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that an invalid taskID in the request produces a valid exception message of TaskIDExpired.">ATS_URL#SPS.DescribeResultAccess-RequestInvalidTaskID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-ResponseSensorIDValidResponse.1">
      <ctl:param name="test.document" />
      <ctl:assertion>A valid sensorID in the request does not produce a DataNotAvailable response.</ctl:assertion>
      <ctl:comment>Fail if the response is a DataNotAvailable response when the request contained a valid sensorID; pass otherwise.</ctl:comment>
      <ctl:link title="Verify that a valid request containing a sensorID parameter produces a valid response other than DataNotAvailable.">ATS_URL#SPS.DescribeResultAccess-ResponseSensorIDValidResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The ServiceType value in the response contains a value.</ctl:assertion>
      <ctl:comment>Pass if the ServiceType in the response contains a value; fail otherwise</ctl:comment>
      <ctl:link title="Verify that the ServiceType in the response contains a value.">ATS_URL#SPS.DescribeResultAccess-ResponseValidServiceType</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
      <ctl:param name="test.document" />
      <ctl:assertion>The ServiceURL value in the response contains a value and is resolvable.</ctl:assertion>
      <ctl:comment>Pass if the ServiceType in the response contains a value and is resolvable; fail otherwise</ctl:comment>
      <ctl:link title="Verify that the ServiceURL in the response contains a value and that value is resolvable.">ATS_URL#SPS.DescribeResultAccess-ResponseValidServiceURL</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-ResponseValidDataNotAvailable.1">
      <ctl:param name="test.document" />
      <ctl:assertion>A DataNotAvailable response is valid and contains values for each of the parameters.</ctl:assertion>
      <ctl:comment>Pass if the DataNotAvailable response is valid and contains a value for each of the parameters; fail otherwise</ctl:comment>
      <ctl:link title="Verify that a DataNotAvailable response is valid and contains values for each of the parameters.">ATS_URL#SPS.DescribeResultAccess-ResponseValidDataNotAvailable</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="tns:core-SPS.DescribeResultAccess-ValidException.1">
      <ctl:param name="test.document" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the DescribeResultAccess operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the DescribeResultAccess operation; fail otherwise</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the DescribeResultAccess operation.">ATS_URL#SPS.DescribeResultAccess-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
      </ctl:code>
    </ctl:test>
  </ctl:package>
</ctl:package>