<?xml version="1.0" encoding="utf-8"?>
<ctl:package
 xmlns:spsFunctions="https://cite.opengeospatial.org/sps-1.0/src/ctl/functions.xml"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:wms="http://www.opengis.net/wms"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:sps="http://www.opengis.net/sps"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:spsTesting="https://cite.opengeospatial.org/spsTesting"
>
    
    <!--Returns the appropriate schema path-->
    <ctl:function name="spsFunctions:getSchemaLocation">
        <ctl:param name="schemaName">The name of the schema file for which the full path will be returned</ctl:param>
        <ctl:return>The full schema path</ctl:return>
        <ctl:description>Based on the provided schema name, this function returns the full URL to the schema document</ctl:description>
        <ctl:code>
            <xsl:variable name="schemaLocation" select="string('http://schemas.opengis.net/')" />
            <xsl:variable name="spsSchemaLocation" select="concat($schemaLocation,'sps/1.0.0/')" />
            <xsl:variable name="owsSchemaLocation" select="concat($schemaLocation,'ows/1.0.0/')" />
            <xsl:variable name="sensorMLSchemaLocation" select="concat($schemaLocation,'sensorML/1.0.0/')" />
            <xsl:variable name="tmlSchemaLocation" select="concat($schemaLocation,'tml/1.0.0/')" />
            <xsl:choose>
                <xsl:when test="starts-with($schemaName,'sps')">
                    <xsl:value-of select="concat($spsSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'ows')">
                    <xsl:value-of select="concat($owsSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'sensorML')">
                    <xsl:value-of select="concat($sensorMLSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:when test="starts-with($schemaName,'tml')">
                    <xsl:value-of select="concat($tmlSchemaLocation,$schemaName)" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$schemaLocation" />
                </xsl:otherwise>
            </xsl:choose>
        </ctl:code>
    </ctl:function>
    
    <!--Issues an invalid request to the service-->
    <ctl:function name="spsFunctions:invalidRequest">
        <ctl:param name="methodURL">The URL to which the request will be submitted</ctl:param>
        <ctl:param name="postBody">The body of the invalid request</ctl:param>
        <ctl:return>The response if it's a valid exception report</ctl:return>
        <ctl:description>Posts an invalid request to the url specified by methodURL</ctl:description>
        <ctl:code>
            <xsl:variable name="invalidRequestResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$methodURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <xsl:value-of select="$postBody" />
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <ctl:call-function name="spsFunctions:getSchemaLocation">
                                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
            </xsl:variable>
            <xsl:value-of select="$invalidRequestResponse" />
        </ctl:code>
    </ctl:function>
    
    <!--Performs a DescribeTasking request-->
    <ctl:function name="spsFunctions:describeTaskingRequest">
        <ctl:param name="describeTaskingURL">The URL to which the request will be submitted</ctl:param>
        <ctl:param name="sensorIDs">Comma-separated list of sensorID(s) to submit with the DescribeTasking request</ctl:param>
        <ctl:return>The response from the server</ctl:return>
        <ctl:description>Executes a DescribeTasking request</ctl:description>
        <ctl:code>
            <!--<xsl:variable name="describeTaskingResponse">-->
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <xsl:for-each select="tokenize($sensorIDs,',')">
                                <sensorID><xsl:value-of select="." /></sensorID>
                            </xsl:for-each>
                        </DescribeTasking>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('spsDescribeTaskingRequestResponse.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                        </ctl:call-function>
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
            <!--</xsl:variable>
            <xsl:value-of select="$describeTaskingResponse/*" />-->
        </ctl:code>
    </ctl:function>
    
    <!--Performs a DescribeResultAccess request-->
    <ctl:function name="spsFunctions:describeResultAccessRequest">
        <ctl:param name="describeResultAccessURL">The URL to which the request will be submitted</ctl:param>
        <ctl:param name="sensorOrTaskID">Sensor/Task ID to use for the request</ctl:param>
        <ctl:param name="type">sensorID or taskID</ctl:param>
        <ctl:return>The response from the server</ctl:return>
        <ctl:description>Executes a DescribeResultAccess request</ctl:description>
        <ctl:code>
            <xsl:variable name="describeResultAccessRequestResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps" service="SPS" version="1.0.0">
                            <xsl:choose>
                                <xsl:when test="$type='sensorID'">
                                    <sensorID><xsl:value-of select="$sensorOrTaskID" /></sensorID>
                                </xsl:when>
                                <xsl:otherwise>
                                    <taskID><xsl:value-of select="$sensorOrTaskID" /></taskID>
                                </xsl:otherwise>
                            </xsl:choose>
                        </DescribeResultAccess>
                    </ctl:body>
                    <parsers:XMLValidatingParser ignoreErrors="true" ignoreWarnings="true">
                        <parsers:schemas>
                            <parsers:schema type="url">
                                <!--<xsl:choose>
                                    <xsl:when test="response//sps:DescribeTaskingRequestResponse">-->
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('spsDescribeResultAccessRequestResponse.xsd')" />
                                        </ctl:call-function>
                                    <!--</xsl:when>
                                    <xsl:otherwise>-->
                            </parsers:schema>
                            <parsers:schema type="url">
                                        <ctl:call-function name="spsFunctions:getSchemaLocation">
                                            <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                                        </ctl:call-function>
                                    <!--</xsl:otherwise>
                                </xsl:choose>-->
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </ctl:request>
            </xsl:variable>
            <xsl:value-of select="$describeResultAccessRequestResponse" />
        </ctl:code>
    </ctl:function>
    
    <!--Validates an ExceptionReport-->
    <ctl:function name="spsFunctions:validateExceptionReport">
        <ctl:param name="exceptionReport">The exception report document to validate</ctl:param>
        <ctl:return>The exception report if it's valid</ctl:return>
        <ctl:description>Validates a returned exception report according to its schema and determines if it is an appropriate exception report for an SPS</ctl:description>
        <ctl:code>
            <parsers:XMLValidatingParser>
                <parsers:schemas>
                    <parsers:schema type="url">
                        <!---->
                    </parsers:schema>
                </parsers:schemas>
            </parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
    
    <!--Verifies that an ExceptionReport provides a valid exceptionCode for the requested operation-->
    <ctl:function name="spsFunctions:verifyExceptionCode">
        <ctl:param name="operationName"></ctl:param>
        <ctl:param name="validExceptionCodes"></ctl:param>
        <ctl:param name="exceptionReport"></ctl:param>
        <ctl:return>True/false depending on whether or not the exceptionCode contained in the ExceptionReport is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
            <xsl:variable name="exceptionCodes" select="$validExceptionCodes//spsTesting:exceptionCode" />
            <xsl:variable name="exceptionCode" select="$exceptionReport//ows:Exception/@exceptionCode" />
            <xsl:variable name="validException" select="exists(index-of($exceptionCodes,$exceptionCode))" />
            <xsl:if test="not($validException)">
                <ctl:message>The provided exceptionCode "<xsl:value-of select="$exceptionCode" />" is not a valid exceptionCode for the <xsl:value-of select="$operationName" /> operation.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <xsl:value-of select="$validException" />
        </ctl:code>
    </ctl:function>
    
    <!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
    <ctl:function name="spsFunctions:checkExceptionReport">
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param>
        <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:choose>
                <xsl:when test="$locatorToCheck='*'">
                    <xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>0)" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
                </xsl:otherwise>
            </xsl:choose>
        </ctl:code>
    </ctl:function>
    
    <!--Validates a SensorML document-->
    <ctl:function name="spsFunctions:validateSensorML">
        <ctl:param name="sensorMLDocument">The SensorML document to validate</ctl:param>
        <ctl:return>The SensorML document if it's valid</ctl:return>
        <ctl:description>Validates a SensorML document according to its schema</ctl:description>
        <ctl:code>
            <parsers:XMLValidatingParser>
                <parsers:schemas>
                    <parsers:schema type="url">
                        <!--Link to appropriate schema-->
                    </parsers:schema>
                </parsers:schemas>
            </parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
    
    <!--Validates a TML document-->
    <ctl:function name="spsFunctions:validateTML">
        <ctl:param name="tmlDocument">The TML document to validate</ctl:param>
        <ctl:return>The TML document if it's valid</ctl:return>
        <ctl:description>Validates a TML document according to its schema</ctl:description>
        <ctl:code>
            <parsers:XMLValidatingParser>
                <parsers:schemas>
                    <parsers:schema type="url">
                        <!--Link to appropriate schema-->
                    </parsers:schema>
                </parsers:schemas>
            </parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
    
    <!--Validates a GetCapabilities response-->
    <ctl:function name="spsFunctions:validateGetCapabilitiesResponse">
        <ctl:param name="getCapabilitiesResponseDocument">The GetCapabilitiesResponse document to validate</ctl:param>
        <ctl:return>The GetCapabilitiesResponse document if it's valid</ctl:return>
        <ctl:description>Validates a GetCapabilitiesResponse document according to its schema</ctl:description>
        <ctl:code>
            <parsers:XMLValidatingParser>
                <parsers:schemas>
                    <parsers:schema type="url">
                        <!--Link to appropriate schema-->
                    </parsers:schema>
                </parsers:schemas>
            </parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
    
    <!--Validates a DescribeTaskingResponse-->
    <ctl:function name="spsFunctions:validateDescribeTaskingResponse">
        <ctl:param name="describeTaskingResponseDocument">The DescribeTaskingResponse document to validate</ctl:param>
        <ctl:return>The DescribeTaskingResponse document if it's valid</ctl:return>
        <ctl:description>Validates a DescribeTaskingResponse document according to its schema</ctl:description>
        <ctl:code>
            <parsers:XMLValidatingParser>
                <parsers:schemas>
                    <parsers:schema type="url">
                        <!--Link to appropriate schema-->
                    </parsers:schema>
                </parsers:schemas>
            </parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
    
    <!--Validates a SubmitResponse-->
    <ctl:function name="spsFunctions:validateSubmitResponse">
        <ctl:param name="submitResponseDocument">The SubmitResponse document to validate</ctl:param>
        <ctl:return>The SubmitResponse document if it's valid</ctl:return>
        <ctl:description>Validates a SubmitResponse document according to its schema</ctl:description>
        <ctl:code>
            <parsers:XMLValidatingParser>
                <parsers:schemas>
                    <parsers:schema type="url">
                        <!--Link to appropriate schema-->
                    </parsers:schema>
                </parsers:schemas>
            </parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
    
    <!--Validates a DescribeResultAccessResponse-->
    <ctl:function name="spsFunctions:validateDescribeResultAccessResponse">
        <ctl:param name="describeResultAccessResponseDocument">The DescribeResultAccessResponse document to validate</ctl:param>
        <ctl:return>The DescribeResultAccessResponse document if it's valid</ctl:return>
        <ctl:description>Validates a DescribeResultAccessResponse document according to its schema</ctl:description>
        <ctl:code>
            <parsers:XMLValidatingParser>
                <parsers:schemas>
                    <parsers:schema type="url">
                        <!--Link to appropriate schema-->
                    </parsers:schema>
                </parsers:schemas>
            </parsers:XMLValidatingParser>
        </ctl:code>
    </ctl:function>
    
    <!--Validates a Response document-->
    <ctl:function name="spsFunctions:validateResponse">
        <ctl:param name="responseDocument">The response document to validate</ctl:param>
        <ctl:return>The response if it's valid</ctl:return>
        <ctl:description>Validates a returned document according to the appropriate schema</ctl:description>
        <ctl:code>
            <xsl:variable name="rootElementName" select="local-name-from-QName(node-name($responseDocument/*))" />
            <xsl:choose>
                <xsl:when test="$rootElementName='SensorML'">
                    <ctl:call-function name="spsFunctions:validateSensorML">
                        <with-param name="sensorMLDocument" select="$responseDocument" />
                    </ctl:call-function>
                </xsl:when>
                <xsl:when test="$rootElementName='tml'">
                    <ctl:call-function name="spsFunctions:validateTML">
                        <with-param name="tmlDocument" select="$responseDocument" />
                    </ctl:call-function>
                </xsl:when>
                <xsl:when test="$rootElementName='Capabilities'">
                    <ctl:call-function name="spsFunctions:validateGetCapabilitiesResponse">
                        <with-param name="getCapabilitiesResponseDocument" select="$responseDocument" />
                    </ctl:call-function>
                </xsl:when>
                <xsl:when test="$rootElementName='DescribeTaskingRequestResponse'">
                    <ctl:call-function name="spsFunctions:validateDescribeTaskingResponse">
                        <with-param name="describeTaskingResponseDocument" select="$responseDocument" />
                    </ctl:call-function>
                </xsl:when>
                <xsl:when test="$rootElementName='SubmitRequestResponse'">
                    <ctl:call-function name="spsFunctions:validateSubmitResponse">
                        <with-param name="submitResponseDocument" select="$responseDocument" />
                    </ctl:call-function>
                </xsl:when>
                <xsl:when test="$rootElementName='DescribeResultAccessRequestResponse'">
                    <ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse">
                        <with-param name="describeResultAccessResponseDocument" select="$responseDocument" />
                    </ctl:call-function>
                </xsl:when>
                <xsl:otherwise>
                    <ctl:message>The response document was not validated.</ctl:message>
                </xsl:otherwise>
            </xsl:choose>
        </ctl:code>
    </ctl:function>
    
    <!--Check for a valid URN-->
    <ctl:function name="spsFunctions:validateURN">
        <ctl:param name="urnString">The URN to validate</ctl:param>
        <ctl:return>True/False depending on whether or not the URN is valid</ctl:return>
        <ctl:description>Determines if a URN is valid</ctl:description>
        <ctl:code>
            <xsl:value-of select="(string-length($urnString)>0) and (matches($urnString,'^urn:ogc:def:?:\w+:?:\w+:?:\w+:?:\w+','i')) and (count(tokenize($urnString,':'))=6)" /><!--[Uu][Rr][Nn]:([^\s.]+|\.(?!\s))+-->
        </ctl:code>
    </ctl:function>
    
    <!--Get the current Date/Time-->
    <ctl:function name="spsFunctions:getCurrentDateTime">
        <ctl:return>The current Date/Time</ctl:return>
        <ctl:description>Returns the current Date/Time</ctl:description>
        <ctl:java class="org.opengis.cite.sps.functions.functions" method="getCurrentDateTime" />
    </ctl:function>
    
    <!--Checks a time value to ensure that it is properly formatted and that it occurs after the compareTime-->
    <ctl:function name="spsFunctions:checkTime">
        <ctl:param name="timeToCheck">The time value to check for correctness</ctl:param>
        <ctl:param name="compareTime">The value to compare this time value to</ctl:param>
        <ctl:return>True if the time to check is valid; false otherwise</ctl:return>
        <ctl:description>Checks that the supplied timeToCheck value is a valid time and that it occurs on or after the compareTime</ctl:description>
        <ctl:code>
            <xsl:value-of select="string-length(normalize-space($timeToCheck))>0 and $timeToCheck>=$compareTime" /><!--TODO: figure out how to compare date/time values-->
        </ctl:code>
    </ctl:function>
</ctl:package>
